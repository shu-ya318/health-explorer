/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@algolia";
exports.ids = ["vendor-chunks/@algolia"];
exports.modules = {

/***/ "(ssr)/./node_modules/@algolia/cache-common/dist/cache-common.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@algolia/cache-common/dist/cache-common.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFallbackableCache: () => (/* binding */ createFallbackableCache),\n/* harmony export */   createNullCache: () => (/* binding */ createNullCache)\n/* harmony export */ });\n// @todo Add logger on options to debug when caches go wrong.\r\nfunction createFallbackableCache(options) {\r\n    const caches = [...options.caches];\r\n    const current = caches.shift(); // eslint-disable-line functional/immutable-data\r\n    if (current === undefined) {\r\n        return createNullCache();\r\n    }\r\n    return {\r\n        get(key, defaultValue, events = {\r\n            miss: () => Promise.resolve(),\r\n        }) {\r\n            return current.get(key, defaultValue, events).catch(() => {\r\n                return createFallbackableCache({ caches }).get(key, defaultValue, events);\r\n            });\r\n        },\r\n        set(key, value) {\r\n            return current.set(key, value).catch(() => {\r\n                return createFallbackableCache({ caches }).set(key, value);\r\n            });\r\n        },\r\n        delete(key) {\r\n            return current.delete(key).catch(() => {\r\n                return createFallbackableCache({ caches }).delete(key);\r\n            });\r\n        },\r\n        clear() {\r\n            return current.clear().catch(() => {\r\n                return createFallbackableCache({ caches }).clear();\r\n            });\r\n        },\r\n    };\r\n}\n\nfunction createNullCache() {\r\n    return {\r\n        get(_key, defaultValue, events = {\r\n            miss: () => Promise.resolve(),\r\n        }) {\r\n            const value = defaultValue();\r\n            return value\r\n                .then(result => Promise.all([result, events.miss(result)]))\r\n                .then(([result]) => result);\r\n        },\r\n        set(_key, value) {\r\n            return Promise.resolve(value);\r\n        },\r\n        delete(_key) {\r\n            return Promise.resolve();\r\n        },\r\n        clear() {\r\n            return Promise.resolve();\r\n        },\r\n    };\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvY2FjaGUtY29tbW9uL2Rpc3QvY2FjaGUtY29tbW9uLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxpREFBaUQsUUFBUTtBQUN6RCxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxpREFBaUQsUUFBUTtBQUN6RCxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxpREFBaUQsUUFBUTtBQUN6RCxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxpREFBaUQsUUFBUTtBQUN6RCxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGgtZXhwbG9yZXIvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvY2FjaGUtY29tbW9uL2Rpc3QvY2FjaGUtY29tbW9uLmVzbS5qcz8zYWM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0b2RvIEFkZCBsb2dnZXIgb24gb3B0aW9ucyB0byBkZWJ1ZyB3aGVuIGNhY2hlcyBnbyB3cm9uZy5cclxuZnVuY3Rpb24gY3JlYXRlRmFsbGJhY2thYmxlQ2FjaGUob3B0aW9ucykge1xyXG4gICAgY29uc3QgY2FjaGVzID0gWy4uLm9wdGlvbnMuY2FjaGVzXTtcclxuICAgIGNvbnN0IGN1cnJlbnQgPSBjYWNoZXMuc2hpZnQoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXHJcbiAgICBpZiAoY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU51bGxDYWNoZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXQoa2V5LCBkZWZhdWx0VmFsdWUsIGV2ZW50cyA9IHtcclxuICAgICAgICAgICAgbWlzczogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXHJcbiAgICAgICAgfSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudC5nZXQoa2V5LCBkZWZhdWx0VmFsdWUsIGV2ZW50cykuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZhbGxiYWNrYWJsZUNhY2hlKHsgY2FjaGVzIH0pLmdldChrZXksIGRlZmF1bHRWYWx1ZSwgZXZlbnRzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudC5zZXQoa2V5LCB2YWx1ZSkuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZhbGxiYWNrYWJsZUNhY2hlKHsgY2FjaGVzIH0pLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGUoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50LmRlbGV0ZShrZXkpLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVGYWxsYmFja2FibGVDYWNoZSh7IGNhY2hlcyB9KS5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGVhcigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuY2xlYXIoKS5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRmFsbGJhY2thYmxlQ2FjaGUoeyBjYWNoZXMgfSkuY2xlYXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlTnVsbENhY2hlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXQoX2tleSwgZGVmYXVsdFZhbHVlLCBldmVudHMgPSB7XHJcbiAgICAgICAgICAgIG1pc3M6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxyXG4gICAgICAgIH0pIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZWZhdWx0VmFsdWUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gUHJvbWlzZS5hbGwoW3Jlc3VsdCwgZXZlbnRzLm1pc3MocmVzdWx0KV0pKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKFtyZXN1bHRdKSA9PiByZXN1bHQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0KF9rZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlKF9rZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xlYXIoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxuXG5leHBvcnQgeyBjcmVhdGVGYWxsYmFja2FibGVDYWNoZSwgY3JlYXRlTnVsbENhY2hlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/cache-common/dist/cache-common.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/cache-in-memory/dist/cache-in-memory.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@algolia/cache-in-memory/dist/cache-in-memory.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInMemoryCache: () => (/* binding */ createInMemoryCache)\n/* harmony export */ });\nfunction createInMemoryCache(options = { serializable: true }) {\r\n    // eslint-disable-next-line functional/no-let\r\n    let cache = {};\r\n    return {\r\n        get(key, defaultValue, events = {\r\n            miss: () => Promise.resolve(),\r\n        }) {\r\n            const keyAsString = JSON.stringify(key);\r\n            if (keyAsString in cache) {\r\n                return Promise.resolve(options.serializable ? JSON.parse(cache[keyAsString]) : cache[keyAsString]);\r\n            }\r\n            const promise = defaultValue();\r\n            const miss = (events && events.miss) || (() => Promise.resolve());\r\n            return promise.then((value) => miss(value)).then(() => promise);\r\n        },\r\n        set(key, value) {\r\n            // eslint-disable-next-line functional/immutable-data\r\n            cache[JSON.stringify(key)] = options.serializable ? JSON.stringify(value) : value;\r\n            return Promise.resolve(value);\r\n        },\r\n        delete(key) {\r\n            // eslint-disable-next-line functional/immutable-data\r\n            delete cache[JSON.stringify(key)];\r\n            return Promise.resolve();\r\n        },\r\n        clear() {\r\n            cache = {};\r\n            return Promise.resolve();\r\n        },\r\n    };\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvY2FjaGUtaW4tbWVtb3J5L2Rpc3QvY2FjaGUtaW4tbWVtb3J5LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEseUNBQXlDLG9CQUFvQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUUrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aC1leHBsb3Jlci8uL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9jYWNoZS1pbi1tZW1vcnkvZGlzdC9jYWNoZS1pbi1tZW1vcnkuZXNtLmpzPzZmOWMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY3JlYXRlSW5NZW1vcnlDYWNoZShvcHRpb25zID0geyBzZXJpYWxpemFibGU6IHRydWUgfSkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvbm8tbGV0XHJcbiAgICBsZXQgY2FjaGUgPSB7fTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0KGtleSwgZGVmYXVsdFZhbHVlLCBldmVudHMgPSB7XHJcbiAgICAgICAgICAgIG1pc3M6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxyXG4gICAgICAgIH0pIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5QXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShrZXkpO1xyXG4gICAgICAgICAgICBpZiAoa2V5QXNTdHJpbmcgaW4gY2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUob3B0aW9ucy5zZXJpYWxpemFibGUgPyBKU09OLnBhcnNlKGNhY2hlW2tleUFzU3RyaW5nXSkgOiBjYWNoZVtrZXlBc1N0cmluZ10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBkZWZhdWx0VmFsdWUoKTtcclxuICAgICAgICAgICAgY29uc3QgbWlzcyA9IChldmVudHMgJiYgZXZlbnRzLm1pc3MpIHx8ICgoKSA9PiBQcm9taXNlLnJlc29sdmUoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oKHZhbHVlKSA9PiBtaXNzKHZhbHVlKSkudGhlbigoKSA9PiBwcm9taXNlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXHJcbiAgICAgICAgICAgIGNhY2hlW0pTT04uc3RyaW5naWZ5KGtleSldID0gb3B0aW9ucy5zZXJpYWxpemFibGUgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGUoa2V5KSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXHJcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtKU09OLnN0cmluZ2lmeShrZXkpXTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xlYXIoKSB7XHJcbiAgICAgICAgICAgIGNhY2hlID0ge307XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxuXG5leHBvcnQgeyBjcmVhdGVJbk1lbW9yeUNhY2hlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/cache-in-memory/dist/cache-in-memory.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/client-analytics/dist/client-analytics.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@algolia/client-analytics/dist/client-analytics.esm.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addABTest: () => (/* binding */ addABTest),\n/* harmony export */   createAnalyticsClient: () => (/* binding */ createAnalyticsClient),\n/* harmony export */   deleteABTest: () => (/* binding */ deleteABTest),\n/* harmony export */   getABTest: () => (/* binding */ getABTest),\n/* harmony export */   getABTests: () => (/* binding */ getABTests),\n/* harmony export */   stopABTest: () => (/* binding */ stopABTest)\n/* harmony export */ });\n/* harmony import */ var _algolia_client_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/client-common */ \"(ssr)/./node_modules/@algolia/client-common/dist/client-common.esm.js\");\n/* harmony import */ var _algolia_transporter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/transporter */ \"(ssr)/./node_modules/@algolia/transporter/dist/transporter.esm.js\");\n/* harmony import */ var _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/requester-common */ \"(ssr)/./node_modules/@algolia/requester-common/dist/requester-common.esm.js\");\n\n\n\n\nconst createAnalyticsClient = options => {\r\n    const region = options.region || 'us';\r\n    const auth = (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.createAuth)(_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.AuthMode.WithinHeaders, options.appId, options.apiKey);\r\n    const transporter = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_1__.createTransporter)({\r\n        hosts: [{ url: `analytics.${region}.algolia.com` }],\r\n        ...options,\r\n        headers: {\r\n            ...auth.headers(),\r\n            ...{ 'content-type': 'application/json' },\r\n            ...options.headers,\r\n        },\r\n        queryParameters: {\r\n            ...auth.queryParameters(),\r\n            ...options.queryParameters,\r\n        },\r\n    });\r\n    const appId = options.appId;\r\n    return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.addMethods)({ appId, transporter }, options.methods);\r\n};\n\nconst addABTest = (base) => {\r\n    return (abTest, requestOptions) => {\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__.MethodEnum.Post,\r\n            path: '2/abtests',\r\n            data: abTest,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst deleteABTest = (base) => {\r\n    return (abTestID, requestOptions) => {\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.encode)('2/abtests/%s', abTestID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getABTest = (base) => {\r\n    return (abTestID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.encode)('2/abtests/%s', abTestID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getABTests = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__.MethodEnum.Get,\r\n            path: '2/abtests',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst stopABTest = (base) => {\r\n    return (abTestID, requestOptions) => {\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.encode)('2/abtests/%s/stop', abTestID),\r\n        }, requestOptions);\r\n    };\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvY2xpZW50LWFuYWx5dGljcy9kaXN0L2NsaWVudC1hbmFseXRpY3MuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFrRjtBQUN6QjtBQUNGOztBQUV2RDtBQUNBO0FBQ0EsaUJBQWlCLGtFQUFVLENBQUMsNERBQVE7QUFDcEMsd0JBQXdCLHVFQUFpQjtBQUN6QyxrQkFBa0Isa0JBQWtCLE9BQU8sZUFBZTtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxXQUFXLGtFQUFVLEdBQUcsb0JBQW9CO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpRUFBVTtBQUM5QjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlFQUFVO0FBQzlCLGtCQUFrQiw4REFBTTtBQUN4QixTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUVBQVU7QUFDOUIsa0JBQWtCLDhEQUFNO0FBQ3hCLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpRUFBVTtBQUM5QjtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpRUFBVTtBQUM5QixrQkFBa0IsOERBQU07QUFDeEIsU0FBUztBQUNUO0FBQ0E7O0FBRTZGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoLWV4cGxvcmVyLy4vbm9kZV9tb2R1bGVzL0BhbGdvbGlhL2NsaWVudC1hbmFseXRpY3MvZGlzdC9jbGllbnQtYW5hbHl0aWNzLmVzbS5qcz8yYzdkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUF1dGgsIEF1dGhNb2RlLCBhZGRNZXRob2RzLCBlbmNvZGUgfSBmcm9tICdAYWxnb2xpYS9jbGllbnQtY29tbW9uJztcbmltcG9ydCB7IGNyZWF0ZVRyYW5zcG9ydGVyIH0gZnJvbSAnQGFsZ29saWEvdHJhbnNwb3J0ZXInO1xuaW1wb3J0IHsgTWV0aG9kRW51bSB9IGZyb20gJ0BhbGdvbGlhL3JlcXVlc3Rlci1jb21tb24nO1xuXG5jb25zdCBjcmVhdGVBbmFseXRpY3NDbGllbnQgPSBvcHRpb25zID0+IHtcclxuICAgIGNvbnN0IHJlZ2lvbiA9IG9wdGlvbnMucmVnaW9uIHx8ICd1cyc7XHJcbiAgICBjb25zdCBhdXRoID0gY3JlYXRlQXV0aChBdXRoTW9kZS5XaXRoaW5IZWFkZXJzLCBvcHRpb25zLmFwcElkLCBvcHRpb25zLmFwaUtleSk7XHJcbiAgICBjb25zdCB0cmFuc3BvcnRlciA9IGNyZWF0ZVRyYW5zcG9ydGVyKHtcclxuICAgICAgICBob3N0czogW3sgdXJsOiBgYW5hbHl0aWNzLiR7cmVnaW9ufS5hbGdvbGlhLmNvbWAgfV0sXHJcbiAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIC4uLmF1dGguaGVhZGVycygpLFxyXG4gICAgICAgICAgICAuLi57ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucy5oZWFkZXJzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcXVlcnlQYXJhbWV0ZXJzOiB7XHJcbiAgICAgICAgICAgIC4uLmF1dGgucXVlcnlQYXJhbWV0ZXJzKCksXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMucXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGFwcElkID0gb3B0aW9ucy5hcHBJZDtcclxuICAgIHJldHVybiBhZGRNZXRob2RzKHsgYXBwSWQsIHRyYW5zcG9ydGVyIH0sIG9wdGlvbnMubWV0aG9kcyk7XHJcbn07XG5cbmNvbnN0IGFkZEFCVGVzdCA9IChiYXNlKSA9PiB7XHJcbiAgICByZXR1cm4gKGFiVGVzdCwgcmVxdWVzdE9wdGlvbnMpID0+IHtcclxuICAgICAgICByZXR1cm4gYmFzZS50cmFuc3BvcnRlci53cml0ZSh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogTWV0aG9kRW51bS5Qb3N0LFxyXG4gICAgICAgICAgICBwYXRoOiAnMi9hYnRlc3RzJyxcclxuICAgICAgICAgICAgZGF0YTogYWJUZXN0LFxyXG4gICAgICAgIH0sIHJlcXVlc3RPcHRpb25zKTtcclxuICAgIH07XHJcbn07XG5cbmNvbnN0IGRlbGV0ZUFCVGVzdCA9IChiYXNlKSA9PiB7XHJcbiAgICByZXR1cm4gKGFiVGVzdElELCByZXF1ZXN0T3B0aW9ucykgPT4ge1xyXG4gICAgICAgIHJldHVybiBiYXNlLnRyYW5zcG9ydGVyLndyaXRlKHtcclxuICAgICAgICAgICAgbWV0aG9kOiBNZXRob2RFbnVtLkRlbGV0ZSxcclxuICAgICAgICAgICAgcGF0aDogZW5jb2RlKCcyL2FidGVzdHMvJXMnLCBhYlRlc3RJRCksXHJcbiAgICAgICAgfSwgcmVxdWVzdE9wdGlvbnMpO1xyXG4gICAgfTtcclxufTtcblxuY29uc3QgZ2V0QUJUZXN0ID0gKGJhc2UpID0+IHtcclxuICAgIHJldHVybiAoYWJUZXN0SUQsIHJlcXVlc3RPcHRpb25zKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2UudHJhbnNwb3J0ZXIucmVhZCh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogTWV0aG9kRW51bS5HZXQsXHJcbiAgICAgICAgICAgIHBhdGg6IGVuY29kZSgnMi9hYnRlc3RzLyVzJywgYWJUZXN0SUQpLFxyXG4gICAgICAgIH0sIHJlcXVlc3RPcHRpb25zKTtcclxuICAgIH07XHJcbn07XG5cbmNvbnN0IGdldEFCVGVzdHMgPSAoYmFzZSkgPT4ge1xyXG4gICAgcmV0dXJuIChyZXF1ZXN0T3B0aW9ucykgPT4ge1xyXG4gICAgICAgIHJldHVybiBiYXNlLnRyYW5zcG9ydGVyLnJlYWQoe1xyXG4gICAgICAgICAgICBtZXRob2Q6IE1ldGhvZEVudW0uR2V0LFxyXG4gICAgICAgICAgICBwYXRoOiAnMi9hYnRlc3RzJyxcclxuICAgICAgICB9LCByZXF1ZXN0T3B0aW9ucyk7XHJcbiAgICB9O1xyXG59O1xuXG5jb25zdCBzdG9wQUJUZXN0ID0gKGJhc2UpID0+IHtcclxuICAgIHJldHVybiAoYWJUZXN0SUQsIHJlcXVlc3RPcHRpb25zKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2UudHJhbnNwb3J0ZXIud3JpdGUoe1xyXG4gICAgICAgICAgICBtZXRob2Q6IE1ldGhvZEVudW0uUG9zdCxcclxuICAgICAgICAgICAgcGF0aDogZW5jb2RlKCcyL2FidGVzdHMvJXMvc3RvcCcsIGFiVGVzdElEKSxcclxuICAgICAgICB9LCByZXF1ZXN0T3B0aW9ucyk7XHJcbiAgICB9O1xyXG59O1xuXG5leHBvcnQgeyBhZGRBQlRlc3QsIGNyZWF0ZUFuYWx5dGljc0NsaWVudCwgZGVsZXRlQUJUZXN0LCBnZXRBQlRlc3QsIGdldEFCVGVzdHMsIHN0b3BBQlRlc3QgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/client-analytics/dist/client-analytics.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/client-common/dist/client-common.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@algolia/client-common/dist/client-common.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthMode: () => (/* binding */ AuthMode),\n/* harmony export */   addMethods: () => (/* binding */ addMethods),\n/* harmony export */   createAuth: () => (/* binding */ createAuth),\n/* harmony export */   createRetryablePromise: () => (/* binding */ createRetryablePromise),\n/* harmony export */   createWaitablePromise: () => (/* binding */ createWaitablePromise),\n/* harmony export */   destroy: () => (/* binding */ destroy),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   shuffle: () => (/* binding */ shuffle),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nfunction createAuth(authMode, appId, apiKey) {\r\n    const credentials = {\r\n        'x-algolia-api-key': apiKey,\r\n        'x-algolia-application-id': appId,\r\n    };\r\n    return {\r\n        headers() {\r\n            return authMode === AuthMode.WithinHeaders ? credentials : {};\r\n        },\r\n        queryParameters() {\r\n            return authMode === AuthMode.WithinQueryParameters ? credentials : {};\r\n        },\r\n    };\r\n}\n\nfunction createRetryablePromise(callback) {\r\n    let retriesCount = 0; // eslint-disable-line functional/no-let\r\n    const retry = () => {\r\n        retriesCount++;\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(callback(retry));\r\n            }, Math.min(100 * retriesCount, 1000));\r\n        });\r\n    };\r\n    return callback(retry);\r\n}\n\nfunction createWaitablePromise(promise, wait = (_response, _requestOptions) => {\r\n    return Promise.resolve();\r\n}) {\r\n    // eslint-disable-next-line functional/immutable-data\r\n    return Object.assign(promise, {\r\n        wait(requestOptions) {\r\n            return createWaitablePromise(promise\r\n                .then(response => Promise.all([wait(response, requestOptions), response]))\r\n                .then(promiseResults => promiseResults[1]));\r\n        },\r\n    });\r\n}\n\n// eslint-disable-next-line functional/prefer-readonly-type\r\nfunction shuffle(array) {\r\n    let c = array.length - 1; // eslint-disable-line functional/no-let\r\n    // eslint-disable-next-line functional/no-loop-statement\r\n    for (c; c > 0; c--) {\r\n        const b = Math.floor(Math.random() * (c + 1));\r\n        const a = array[c];\r\n        array[c] = array[b]; // eslint-disable-line functional/immutable-data, no-param-reassign\r\n        array[b] = a; // eslint-disable-line functional/immutable-data, no-param-reassign\r\n    }\r\n    return array;\r\n}\r\nfunction addMethods(base, methods) {\r\n    if (!methods) {\r\n        return base;\r\n    }\r\n    Object.keys(methods).forEach(key => {\r\n        // eslint-disable-next-line functional/immutable-data, no-param-reassign\r\n        base[key] = methods[key](base);\r\n    });\r\n    return base;\r\n}\r\nfunction encode(format, ...args) {\r\n    // eslint-disable-next-line functional/no-let\r\n    let i = 0;\r\n    return format.replace(/%s/g, () => encodeURIComponent(args[i++]));\r\n}\n\nconst version = '4.24.0';\n\nconst destroy = (base) => {\r\n    return () => {\r\n        return base.transporter.requester.destroy();\r\n    };\r\n};\n\nconst AuthMode = {\r\n    /**\r\n     * If auth credentials should be in query parameters.\r\n     */\r\n    WithinQueryParameters: 0,\r\n    /**\r\n     * If auth credentials should be in headers.\r\n     */\r\n    WithinHeaders: 1,\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvY2xpZW50LWNvbW1vbi9kaXN0L2NsaWVudC1jb21tb24uZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4SCIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aC1leHBsb3Jlci8uL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9jbGllbnQtY29tbW9uL2Rpc3QvY2xpZW50LWNvbW1vbi5lc20uanM/N2Y1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjcmVhdGVBdXRoKGF1dGhNb2RlLCBhcHBJZCwgYXBpS2V5KSB7XHJcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IHtcclxuICAgICAgICAneC1hbGdvbGlhLWFwaS1rZXknOiBhcGlLZXksXHJcbiAgICAgICAgJ3gtYWxnb2xpYS1hcHBsaWNhdGlvbi1pZCc6IGFwcElkLFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGVhZGVycygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF1dGhNb2RlID09PSBBdXRoTW9kZS5XaXRoaW5IZWFkZXJzID8gY3JlZGVudGlhbHMgOiB7fTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHF1ZXJ5UGFyYW1ldGVycygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF1dGhNb2RlID09PSBBdXRoTW9kZS5XaXRoaW5RdWVyeVBhcmFtZXRlcnMgPyBjcmVkZW50aWFscyA6IHt9O1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJldHJ5YWJsZVByb21pc2UoY2FsbGJhY2spIHtcclxuICAgIGxldCByZXRyaWVzQ291bnQgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmN0aW9uYWwvbm8tbGV0XHJcbiAgICBjb25zdCByZXRyeSA9ICgpID0+IHtcclxuICAgICAgICByZXRyaWVzQ291bnQrKztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNhbGxiYWNrKHJldHJ5KSk7XHJcbiAgICAgICAgICAgIH0sIE1hdGgubWluKDEwMCAqIHJldHJpZXNDb3VudCwgMTAwMCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBjYWxsYmFjayhyZXRyeSk7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2FpdGFibGVQcm9taXNlKHByb21pc2UsIHdhaXQgPSAoX3Jlc3BvbnNlLCBfcmVxdWVzdE9wdGlvbnMpID0+IHtcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxufSkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGFcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcclxuICAgICAgICB3YWl0KHJlcXVlc3RPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVXYWl0YWJsZVByb21pc2UocHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gUHJvbWlzZS5hbGwoW3dhaXQocmVzcG9uc2UsIHJlcXVlc3RPcHRpb25zKSwgcmVzcG9uc2VdKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHByb21pc2VSZXN1bHRzID0+IHByb21pc2VSZXN1bHRzWzFdKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL3ByZWZlci1yZWFkb25seS10eXBlXHJcbmZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgIGxldCBjID0gYXJyYXkubGVuZ3RoIC0gMTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jdGlvbmFsL25vLWxldFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvbm8tbG9vcC1zdGF0ZW1lbnRcclxuICAgIGZvciAoYzsgYyA+IDA7IGMtLSkge1xyXG4gICAgICAgIGNvbnN0IGIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoYyArIDEpKTtcclxuICAgICAgICBjb25zdCBhID0gYXJyYXlbY107XHJcbiAgICAgICAgYXJyYXlbY10gPSBhcnJheVtiXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhLCBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgICAgIGFycmF5W2JdID0gYTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhLCBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcbmZ1bmN0aW9uIGFkZE1ldGhvZHMoYmFzZSwgbWV0aG9kcykge1xyXG4gICAgaWYgKCFtZXRob2RzKSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U7XHJcbiAgICB9XHJcbiAgICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGEsIG5vLXBhcmFtLXJlYXNzaWduXHJcbiAgICAgICAgYmFzZVtrZXldID0gbWV0aG9kc1trZXldKGJhc2UpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYmFzZTtcclxufVxyXG5mdW5jdGlvbiBlbmNvZGUoZm9ybWF0LCAuLi5hcmdzKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9uby1sZXRcclxuICAgIGxldCBpID0gMDtcclxuICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvJXMvZywgKCkgPT4gZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3NbaSsrXSkpO1xyXG59XG5cbmNvbnN0IHZlcnNpb24gPSAnNC4yNC4wJztcblxuY29uc3QgZGVzdHJveSA9IChiYXNlKSA9PiB7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBiYXNlLnRyYW5zcG9ydGVyLnJlcXVlc3Rlci5kZXN0cm95KCk7XHJcbiAgICB9O1xyXG59O1xuXG5jb25zdCBBdXRoTW9kZSA9IHtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYXV0aCBjcmVkZW50aWFscyBzaG91bGQgYmUgaW4gcXVlcnkgcGFyYW1ldGVycy5cclxuICAgICAqL1xyXG4gICAgV2l0aGluUXVlcnlQYXJhbWV0ZXJzOiAwLFxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBhdXRoIGNyZWRlbnRpYWxzIHNob3VsZCBiZSBpbiBoZWFkZXJzLlxyXG4gICAgICovXHJcbiAgICBXaXRoaW5IZWFkZXJzOiAxLFxyXG59O1xuXG5leHBvcnQgeyBBdXRoTW9kZSwgYWRkTWV0aG9kcywgY3JlYXRlQXV0aCwgY3JlYXRlUmV0cnlhYmxlUHJvbWlzZSwgY3JlYXRlV2FpdGFibGVQcm9taXNlLCBkZXN0cm95LCBlbmNvZGUsIHNodWZmbGUsIHZlcnNpb24gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/client-common/dist/client-common.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/client-personalization/dist/client-personalization.esm.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@algolia/client-personalization/dist/client-personalization.esm.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPersonalizationClient: () => (/* binding */ createPersonalizationClient),\n/* harmony export */   getPersonalizationStrategy: () => (/* binding */ getPersonalizationStrategy),\n/* harmony export */   setPersonalizationStrategy: () => (/* binding */ setPersonalizationStrategy)\n/* harmony export */ });\n/* harmony import */ var _algolia_client_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/client-common */ \"(ssr)/./node_modules/@algolia/client-common/dist/client-common.esm.js\");\n/* harmony import */ var _algolia_transporter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/transporter */ \"(ssr)/./node_modules/@algolia/transporter/dist/transporter.esm.js\");\n/* harmony import */ var _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/requester-common */ \"(ssr)/./node_modules/@algolia/requester-common/dist/requester-common.esm.js\");\n\n\n\n\nconst createPersonalizationClient = options => {\r\n    const region = options.region || 'us';\r\n    const auth = (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.createAuth)(_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.AuthMode.WithinHeaders, options.appId, options.apiKey);\r\n    const transporter = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_1__.createTransporter)({\r\n        hosts: [{ url: `personalization.${region}.algolia.com` }],\r\n        ...options,\r\n        headers: {\r\n            ...auth.headers(),\r\n            ...{ 'content-type': 'application/json' },\r\n            ...options.headers,\r\n        },\r\n        queryParameters: {\r\n            ...auth.queryParameters(),\r\n            ...options.queryParameters,\r\n        },\r\n    });\r\n    return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_0__.addMethods)({ appId: options.appId, transporter }, options.methods);\r\n};\n\nconst getPersonalizationStrategy = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__.MethodEnum.Get,\r\n            path: '1/strategies/personalization',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst setPersonalizationStrategy = (base) => {\r\n    return (personalizationStrategy, requestOptions) => {\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_2__.MethodEnum.Post,\r\n            path: '1/strategies/personalization',\r\n            data: personalizationStrategy,\r\n        }, requestOptions);\r\n    };\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvY2xpZW50LXBlcnNvbmFsaXphdGlvbi9kaXN0L2NsaWVudC1wZXJzb25hbGl6YXRpb24uZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwRTtBQUNqQjtBQUNGOztBQUV2RDtBQUNBO0FBQ0EsaUJBQWlCLGtFQUFVLENBQUMsNERBQVE7QUFDcEMsd0JBQXdCLHVFQUFpQjtBQUN6QyxrQkFBa0Isd0JBQXdCLE9BQU8sZUFBZTtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsV0FBVyxrRUFBVSxHQUFHLG1DQUFtQztBQUMzRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUVBQVU7QUFDOUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUVBQVU7QUFDOUI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUUrRiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aC1leHBsb3Jlci8uL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9jbGllbnQtcGVyc29uYWxpemF0aW9uL2Rpc3QvY2xpZW50LXBlcnNvbmFsaXphdGlvbi5lc20uanM/ZDdmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVBdXRoLCBBdXRoTW9kZSwgYWRkTWV0aG9kcyB9IGZyb20gJ0BhbGdvbGlhL2NsaWVudC1jb21tb24nO1xuaW1wb3J0IHsgY3JlYXRlVHJhbnNwb3J0ZXIgfSBmcm9tICdAYWxnb2xpYS90cmFuc3BvcnRlcic7XG5pbXBvcnQgeyBNZXRob2RFbnVtIH0gZnJvbSAnQGFsZ29saWEvcmVxdWVzdGVyLWNvbW1vbic7XG5cbmNvbnN0IGNyZWF0ZVBlcnNvbmFsaXphdGlvbkNsaWVudCA9IG9wdGlvbnMgPT4ge1xyXG4gICAgY29uc3QgcmVnaW9uID0gb3B0aW9ucy5yZWdpb24gfHwgJ3VzJztcclxuICAgIGNvbnN0IGF1dGggPSBjcmVhdGVBdXRoKEF1dGhNb2RlLldpdGhpbkhlYWRlcnMsIG9wdGlvbnMuYXBwSWQsIG9wdGlvbnMuYXBpS2V5KTtcclxuICAgIGNvbnN0IHRyYW5zcG9ydGVyID0gY3JlYXRlVHJhbnNwb3J0ZXIoe1xyXG4gICAgICAgIGhvc3RzOiBbeyB1cmw6IGBwZXJzb25hbGl6YXRpb24uJHtyZWdpb259LmFsZ29saWEuY29tYCB9XSxcclxuICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgLi4uYXV0aC5oZWFkZXJzKCksXHJcbiAgICAgICAgICAgIC4uLnsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLmhlYWRlcnMsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBxdWVyeVBhcmFtZXRlcnM6IHtcclxuICAgICAgICAgICAgLi4uYXV0aC5xdWVyeVBhcmFtZXRlcnMoKSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucy5xdWVyeVBhcmFtZXRlcnMsXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGFkZE1ldGhvZHMoeyBhcHBJZDogb3B0aW9ucy5hcHBJZCwgdHJhbnNwb3J0ZXIgfSwgb3B0aW9ucy5tZXRob2RzKTtcclxufTtcblxuY29uc3QgZ2V0UGVyc29uYWxpemF0aW9uU3RyYXRlZ3kgPSAoYmFzZSkgPT4ge1xyXG4gICAgcmV0dXJuIChyZXF1ZXN0T3B0aW9ucykgPT4ge1xyXG4gICAgICAgIHJldHVybiBiYXNlLnRyYW5zcG9ydGVyLnJlYWQoe1xyXG4gICAgICAgICAgICBtZXRob2Q6IE1ldGhvZEVudW0uR2V0LFxyXG4gICAgICAgICAgICBwYXRoOiAnMS9zdHJhdGVnaWVzL3BlcnNvbmFsaXphdGlvbicsXHJcbiAgICAgICAgfSwgcmVxdWVzdE9wdGlvbnMpO1xyXG4gICAgfTtcclxufTtcblxuY29uc3Qgc2V0UGVyc29uYWxpemF0aW9uU3RyYXRlZ3kgPSAoYmFzZSkgPT4ge1xyXG4gICAgcmV0dXJuIChwZXJzb25hbGl6YXRpb25TdHJhdGVneSwgcmVxdWVzdE9wdGlvbnMpID0+IHtcclxuICAgICAgICByZXR1cm4gYmFzZS50cmFuc3BvcnRlci53cml0ZSh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogTWV0aG9kRW51bS5Qb3N0LFxyXG4gICAgICAgICAgICBwYXRoOiAnMS9zdHJhdGVnaWVzL3BlcnNvbmFsaXphdGlvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IHBlcnNvbmFsaXphdGlvblN0cmF0ZWd5LFxyXG4gICAgICAgIH0sIHJlcXVlc3RPcHRpb25zKTtcclxuICAgIH07XHJcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVBlcnNvbmFsaXphdGlvbkNsaWVudCwgZ2V0UGVyc29uYWxpemF0aW9uU3RyYXRlZ3ksIHNldFBlcnNvbmFsaXphdGlvblN0cmF0ZWd5IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/client-personalization/dist/client-personalization.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/client-search/dist/client-search.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@algolia/client-search/dist/client-search.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyACLEnum: () => (/* binding */ ApiKeyACLEnum),\n/* harmony export */   BatchActionEnum: () => (/* binding */ BatchActionEnum),\n/* harmony export */   ScopeEnum: () => (/* binding */ ScopeEnum),\n/* harmony export */   StrategyEnum: () => (/* binding */ StrategyEnum),\n/* harmony export */   SynonymEnum: () => (/* binding */ SynonymEnum),\n/* harmony export */   addApiKey: () => (/* binding */ addApiKey),\n/* harmony export */   assignUserID: () => (/* binding */ assignUserID),\n/* harmony export */   assignUserIDs: () => (/* binding */ assignUserIDs),\n/* harmony export */   batch: () => (/* binding */ batch),\n/* harmony export */   browseObjects: () => (/* binding */ browseObjects),\n/* harmony export */   browseRules: () => (/* binding */ browseRules),\n/* harmony export */   browseSynonyms: () => (/* binding */ browseSynonyms),\n/* harmony export */   chunkedBatch: () => (/* binding */ chunkedBatch),\n/* harmony export */   clearDictionaryEntries: () => (/* binding */ clearDictionaryEntries),\n/* harmony export */   clearObjects: () => (/* binding */ clearObjects),\n/* harmony export */   clearRules: () => (/* binding */ clearRules),\n/* harmony export */   clearSynonyms: () => (/* binding */ clearSynonyms),\n/* harmony export */   copyIndex: () => (/* binding */ copyIndex),\n/* harmony export */   copyRules: () => (/* binding */ copyRules),\n/* harmony export */   copySettings: () => (/* binding */ copySettings),\n/* harmony export */   copySynonyms: () => (/* binding */ copySynonyms),\n/* harmony export */   createBrowsablePromise: () => (/* binding */ createBrowsablePromise),\n/* harmony export */   createMissingObjectIDError: () => (/* binding */ createMissingObjectIDError),\n/* harmony export */   createObjectNotFoundError: () => (/* binding */ createObjectNotFoundError),\n/* harmony export */   createSearchClient: () => (/* binding */ createSearchClient),\n/* harmony export */   createValidUntilNotFoundError: () => (/* binding */ createValidUntilNotFoundError),\n/* harmony export */   customRequest: () => (/* binding */ customRequest),\n/* harmony export */   deleteApiKey: () => (/* binding */ deleteApiKey),\n/* harmony export */   deleteBy: () => (/* binding */ deleteBy),\n/* harmony export */   deleteDictionaryEntries: () => (/* binding */ deleteDictionaryEntries),\n/* harmony export */   deleteIndex: () => (/* binding */ deleteIndex),\n/* harmony export */   deleteObject: () => (/* binding */ deleteObject),\n/* harmony export */   deleteObjects: () => (/* binding */ deleteObjects),\n/* harmony export */   deleteRule: () => (/* binding */ deleteRule),\n/* harmony export */   deleteSynonym: () => (/* binding */ deleteSynonym),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   findAnswers: () => (/* binding */ findAnswers),\n/* harmony export */   findObject: () => (/* binding */ findObject),\n/* harmony export */   generateSecuredApiKey: () => (/* binding */ generateSecuredApiKey),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getAppTask: () => (/* binding */ getAppTask),\n/* harmony export */   getDictionarySettings: () => (/* binding */ getDictionarySettings),\n/* harmony export */   getLogs: () => (/* binding */ getLogs),\n/* harmony export */   getObject: () => (/* binding */ getObject),\n/* harmony export */   getObjectPosition: () => (/* binding */ getObjectPosition),\n/* harmony export */   getObjects: () => (/* binding */ getObjects),\n/* harmony export */   getRule: () => (/* binding */ getRule),\n/* harmony export */   getSecuredApiKeyRemainingValidity: () => (/* binding */ getSecuredApiKeyRemainingValidity),\n/* harmony export */   getSettings: () => (/* binding */ getSettings),\n/* harmony export */   getSynonym: () => (/* binding */ getSynonym),\n/* harmony export */   getTask: () => (/* binding */ getTask),\n/* harmony export */   getTopUserIDs: () => (/* binding */ getTopUserIDs),\n/* harmony export */   getUserID: () => (/* binding */ getUserID),\n/* harmony export */   hasPendingMappings: () => (/* binding */ hasPendingMappings),\n/* harmony export */   initIndex: () => (/* binding */ initIndex),\n/* harmony export */   listApiKeys: () => (/* binding */ listApiKeys),\n/* harmony export */   listClusters: () => (/* binding */ listClusters),\n/* harmony export */   listIndices: () => (/* binding */ listIndices),\n/* harmony export */   listUserIDs: () => (/* binding */ listUserIDs),\n/* harmony export */   moveIndex: () => (/* binding */ moveIndex),\n/* harmony export */   multipleBatch: () => (/* binding */ multipleBatch),\n/* harmony export */   multipleGetObjects: () => (/* binding */ multipleGetObjects),\n/* harmony export */   multipleQueries: () => (/* binding */ multipleQueries),\n/* harmony export */   multipleSearchForFacetValues: () => (/* binding */ multipleSearchForFacetValues),\n/* harmony export */   partialUpdateObject: () => (/* binding */ partialUpdateObject),\n/* harmony export */   partialUpdateObjects: () => (/* binding */ partialUpdateObjects),\n/* harmony export */   removeUserID: () => (/* binding */ removeUserID),\n/* harmony export */   replaceAllObjects: () => (/* binding */ replaceAllObjects),\n/* harmony export */   replaceAllRules: () => (/* binding */ replaceAllRules),\n/* harmony export */   replaceAllSynonyms: () => (/* binding */ replaceAllSynonyms),\n/* harmony export */   replaceDictionaryEntries: () => (/* binding */ replaceDictionaryEntries),\n/* harmony export */   restoreApiKey: () => (/* binding */ restoreApiKey),\n/* harmony export */   saveDictionaryEntries: () => (/* binding */ saveDictionaryEntries),\n/* harmony export */   saveObject: () => (/* binding */ saveObject),\n/* harmony export */   saveObjects: () => (/* binding */ saveObjects),\n/* harmony export */   saveRule: () => (/* binding */ saveRule),\n/* harmony export */   saveRules: () => (/* binding */ saveRules),\n/* harmony export */   saveSynonym: () => (/* binding */ saveSynonym),\n/* harmony export */   saveSynonyms: () => (/* binding */ saveSynonyms),\n/* harmony export */   search: () => (/* binding */ search),\n/* harmony export */   searchDictionaryEntries: () => (/* binding */ searchDictionaryEntries),\n/* harmony export */   searchForFacetValues: () => (/* binding */ searchForFacetValues),\n/* harmony export */   searchRules: () => (/* binding */ searchRules),\n/* harmony export */   searchSynonyms: () => (/* binding */ searchSynonyms),\n/* harmony export */   searchUserIDs: () => (/* binding */ searchUserIDs),\n/* harmony export */   setDictionarySettings: () => (/* binding */ setDictionarySettings),\n/* harmony export */   setSettings: () => (/* binding */ setSettings),\n/* harmony export */   updateApiKey: () => (/* binding */ updateApiKey),\n/* harmony export */   waitAppTask: () => (/* binding */ waitAppTask),\n/* harmony export */   waitTask: () => (/* binding */ waitTask)\n/* harmony export */ });\n/* harmony import */ var _algolia_client_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/client-common */ \"(ssr)/./node_modules/@algolia/client-common/dist/client-common.esm.js\");\n/* harmony import */ var _algolia_transporter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/transporter */ \"(ssr)/./node_modules/@algolia/transporter/dist/transporter.esm.js\");\n/* harmony import */ var _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @algolia/requester-common */ \"(ssr)/./node_modules/@algolia/requester-common/dist/requester-common.esm.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n\n\nfunction createBrowsablePromise(options) {\r\n    const browse = (data) => {\r\n        return options.request(data).then(response => {\r\n            /**\r\n             * First we send to the developer the\r\n             * batch retrieved from the API.\r\n             */\r\n            if (options.batch !== undefined) {\r\n                options.batch(response.hits);\r\n            }\r\n            /**\r\n             * Then, we ask to the browse concrete implementation\r\n             * if we should stop browsing. As example, the `browseObjects`\r\n             * method will stop if the cursor is not present on the response.\r\n             */\r\n            if (options.shouldStop(response)) {\r\n                return undefined;\r\n            }\r\n            /**\r\n             * Finally, if the response contains a cursor, we browse to the next\r\n             * batch using that same cursor. Otherwise, we just use the traditional\r\n             * browsing using the page element.\r\n             */\r\n            if (response.cursor) {\r\n                return browse({\r\n                    cursor: response.cursor,\r\n                });\r\n            }\r\n            return browse({\r\n                page: (data.page || 0) + 1,\r\n            });\r\n        });\r\n    };\r\n    return browse({});\r\n}\n\nconst createSearchClient = options => {\r\n    const appId = options.appId;\r\n    const auth = (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createAuth)(options.authMode !== undefined ? options.authMode : _algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.AuthMode.WithinHeaders, appId, options.apiKey);\r\n    const transporter = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createTransporter)({\r\n        hosts: [\r\n            { url: `${appId}-dsn.algolia.net`, accept: _algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.CallEnum.Read },\r\n            { url: `${appId}.algolia.net`, accept: _algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.CallEnum.Write },\r\n        ].concat((0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.shuffle)([\r\n            { url: `${appId}-1.algolianet.com` },\r\n            { url: `${appId}-2.algolianet.com` },\r\n            { url: `${appId}-3.algolianet.com` },\r\n        ])),\r\n        ...options,\r\n        headers: {\r\n            ...auth.headers(),\r\n            ...{ 'content-type': 'application/x-www-form-urlencoded' },\r\n            ...options.headers,\r\n        },\r\n        queryParameters: {\r\n            ...auth.queryParameters(),\r\n            ...options.queryParameters,\r\n        },\r\n    });\r\n    const base = {\r\n        transporter,\r\n        appId,\r\n        addAlgoliaAgent(segment, version) {\r\n            transporter.userAgent.add({ segment, version });\r\n        },\r\n        clearCache() {\r\n            return Promise.all([\r\n                transporter.requestsCache.clear(),\r\n                transporter.responsesCache.clear(),\r\n            ]).then(() => undefined);\r\n        },\r\n    };\r\n    return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.addMethods)(base, options.methods);\r\n};\n\nfunction createMissingObjectIDError() {\r\n    return {\r\n        name: 'MissingObjectIDError',\r\n        message: 'All objects must have an unique objectID ' +\r\n            '(like a primary key) to be valid. ' +\r\n            'Algolia is also able to generate objectIDs ' +\r\n            \"automatically but *it's not recommended*. \" +\r\n            \"To do it, use the `{'autoGenerateObjectIDIfNotExist': true}` option.\",\r\n    };\r\n}\n\nfunction createObjectNotFoundError() {\r\n    return {\r\n        name: 'ObjectNotFoundError',\r\n        message: 'Object not found.',\r\n    };\r\n}\n\nfunction createValidUntilNotFoundError() {\r\n    return {\r\n        name: 'ValidUntilNotFoundError',\r\n        message: 'ValidUntil not found in given secured api key.',\r\n    };\r\n}\n\nconst addApiKey = (base) => {\r\n    return (acl, requestOptions) => {\r\n        const { queryParameters, ...options } = requestOptions || {};\r\n        const data = {\r\n            acl,\r\n            ...(queryParameters !== undefined ? { queryParameters } : {}),\r\n        };\r\n        const wait = (response, waitRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n                return getApiKey(base)(response.key, waitRequestOptions).catch((apiError) => {\r\n                    if (apiError.status !== 404) {\r\n                        throw apiError;\r\n                    }\r\n                    return retry();\r\n                });\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/keys',\r\n            data,\r\n        }, options), wait);\r\n    };\r\n};\n\nconst assignUserID = (base) => {\r\n    return (userID, clusterName, requestOptions) => {\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(requestOptions);\r\n        // eslint-disable-next-line functional/immutable-data\r\n        mappedRequestOptions.queryParameters['X-Algolia-User-ID'] = userID;\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/clusters/mapping',\r\n            data: { cluster: clusterName },\r\n        }, mappedRequestOptions);\r\n    };\r\n};\n\nconst assignUserIDs = (base) => {\r\n    return (userIDs, clusterName, requestOptions) => {\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/clusters/mapping/batch',\r\n            data: {\r\n                users: userIDs,\r\n                cluster: clusterName,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst clearDictionaryEntries = (base) => {\r\n    return (dictionary, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: {\r\n                clearExistingDictionaryEntries: true,\r\n                requests: { action: 'addEntry', body: [] },\r\n            },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst copyIndex = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return initIndex(base)(from, {\r\n                methods: { waitTask },\r\n            }).waitTask(response.taskID, waitRequestOptions);\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/operation', from),\r\n            data: {\r\n                operation: 'copy',\r\n                destination: to,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst copyRules = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        return copyIndex(base)(from, to, {\r\n            ...requestOptions,\r\n            scope: [ScopeEnum.Rules],\r\n        });\r\n    };\r\n};\n\nconst copySettings = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        return copyIndex(base)(from, to, {\r\n            ...requestOptions,\r\n            scope: [ScopeEnum.Settings],\r\n        });\r\n    };\r\n};\n\nconst copySynonyms = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        return copyIndex(base)(from, to, {\r\n            ...requestOptions,\r\n            scope: [ScopeEnum.Synonyms],\r\n        });\r\n    };\r\n};\n\nconst customRequest = (base) => {\r\n    return (request, requestOptions) => {\r\n        if (request.method === _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get) {\r\n            return base.transporter.read(request, requestOptions);\r\n        }\r\n        return base.transporter.write(request, requestOptions);\r\n    };\r\n};\n\nconst deleteApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        const wait = (_, waitRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n                return getApiKey(base)(apiKey, waitRequestOptions)\r\n                    .then(retry)\r\n                    .catch((apiError) => {\r\n                    if (apiError.status !== 404) {\r\n                        throw apiError;\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s', apiKey),\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst deleteDictionaryEntries = (base) => {\r\n    return (dictionary, objectIDs, requestOptions) => {\r\n        const requests = objectIDs.map(objectID => ({\r\n            action: 'deleteEntry',\r\n            body: { objectID },\r\n        }));\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: { clearExistingDictionaryEntries: false, requests },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst generateSecuredApiKey = () => {\r\n    return (parentApiKey, restrictions) => {\r\n        const queryParameters = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.serializeQueryParameters)(restrictions);\r\n        const securedKey = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)('sha256', parentApiKey)\r\n            .update(queryParameters)\r\n            .digest('hex');\r\n        return Buffer.from(securedKey + queryParameters).toString('base64');\r\n    };\r\n};\n\nconst getApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s', apiKey),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getAppTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/task/%s', taskID.toString()),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getDictionarySettings = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '/1/dictionaries/*/settings',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getLogs = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/logs',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getSecuredApiKeyRemainingValidity = () => {\r\n    return (securedApiKey) => {\r\n        const decodedString = Buffer.from(securedApiKey, 'base64').toString('ascii');\r\n        const regex = /validUntil=(\\d+)/;\r\n        const match = decodedString.match(regex);\r\n        if (match === null) {\r\n            throw createValidUntilNotFoundError();\r\n        }\r\n        return parseInt(match[1], 10) - Math.round(new Date().getTime() / 1000);\r\n    };\r\n};\n\nconst getTopUserIDs = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters/mapping/top',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getUserID = (base) => {\r\n    return (userID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/clusters/mapping/%s', userID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst hasPendingMappings = (base) => {\r\n    return (requestOptions) => {\r\n        const { retrieveMappings, ...options } = requestOptions || {};\r\n        if (retrieveMappings === true) {\r\n            // eslint-disable-next-line functional/immutable-data\r\n            options.getClusters = true;\r\n        }\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters/mapping/pending',\r\n        }, options);\r\n    };\r\n};\n\nconst initIndex = (base) => {\r\n    return (indexName, options = {}) => {\r\n        const searchIndex = {\r\n            transporter: base.transporter,\r\n            appId: base.appId,\r\n            indexName,\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.addMethods)(searchIndex, options.methods);\r\n    };\r\n};\n\nconst listApiKeys = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/keys',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst listClusters = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst listIndices = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/indexes',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst listUserIDs = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters/mapping',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst moveIndex = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return initIndex(base)(from, {\r\n                methods: { waitTask },\r\n            }).waitTask(response.taskID, waitRequestOptions);\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/operation', from),\r\n            data: {\r\n                operation: 'move',\r\n                destination: to,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst multipleBatch = (base) => {\r\n    return (requests, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return Promise.all(Object.keys(response.taskID).map(indexName => {\r\n                return initIndex(base)(indexName, {\r\n                    methods: { waitTask },\r\n                }).waitTask(response.taskID[indexName], waitRequestOptions);\r\n            }));\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/batch',\r\n            data: {\r\n                requests,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst multipleGetObjects = (base) => {\r\n    return (requests, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/objects',\r\n            data: {\r\n                requests,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst multipleQueries = (base) => {\r\n    return (queries, requestOptions) => {\r\n        const requests = queries.map(query => {\r\n            return {\r\n                ...query,\r\n                params: (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.serializeQueryParameters)(query.params || {}),\r\n            };\r\n        });\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/queries',\r\n            data: {\r\n                requests,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst multipleSearchForFacetValues = (base) => {\r\n    return (queries, requestOptions) => {\r\n        return Promise.all(queries.map(query => {\r\n            const { facetName, facetQuery, ...params } = query.params;\r\n            return initIndex(base)(query.indexName, {\r\n                methods: { searchForFacetValues },\r\n            }).searchForFacetValues(facetName, facetQuery, {\r\n                ...requestOptions,\r\n                ...params,\r\n            });\r\n        }));\r\n    };\r\n};\n\nconst removeUserID = (base) => {\r\n    return (userID, requestOptions) => {\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(requestOptions);\r\n        // eslint-disable-next-line functional/immutable-data\r\n        mappedRequestOptions.queryParameters['X-Algolia-User-ID'] = userID;\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: '1/clusters/mapping',\r\n        }, mappedRequestOptions);\r\n    };\r\n};\n\nconst replaceDictionaryEntries = (base) => {\r\n    return (dictionary, entries, requestOptions) => {\r\n        const requests = entries.map(entry => ({\r\n            action: 'addEntry',\r\n            body: entry,\r\n        }));\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: { clearExistingDictionaryEntries: true, requests },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst restoreApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        const wait = (_, waitRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n                return getApiKey(base)(apiKey, waitRequestOptions).catch((apiError) => {\r\n                    if (apiError.status !== 404) {\r\n                        throw apiError;\r\n                    }\r\n                    return retry();\r\n                });\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s/restore', apiKey),\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst saveDictionaryEntries = (base) => {\r\n    return (dictionary, entries, requestOptions) => {\r\n        const requests = entries.map(entry => ({\r\n            action: 'addEntry',\r\n            body: entry,\r\n        }));\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: { clearExistingDictionaryEntries: false, requests },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst searchDictionaryEntries = (base) => {\r\n    return (dictionary, query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/search', dictionary),\r\n            data: {\r\n                query,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchUserIDs = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/clusters/mapping/search',\r\n            data: {\r\n                query,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst setDictionarySettings = (base) => {\r\n    return (settings, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Put,\r\n            path: '/1/dictionaries/*/settings',\r\n            data: settings,\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst updateApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        const updatedFields = Object.assign({}, requestOptions);\r\n        const { queryParameters, ...options } = requestOptions || {};\r\n        const data = queryParameters ? { queryParameters } : {};\r\n        const apiKeyFields = [\r\n            'acl',\r\n            'indexes',\r\n            'referers',\r\n            'restrictSources',\r\n            'queryParameters',\r\n            'description',\r\n            'maxQueriesPerIPPerHour',\r\n            'maxHitsPerQuery',\r\n        ];\r\n        // Check that all the fields retrieved through getApiKey are the same as the ones we wanted to update\r\n        const hasChanged = (getApiKeyResponse) => {\r\n            return Object.keys(updatedFields)\r\n                .filter((updatedField) => apiKeyFields.indexOf(updatedField) !== -1)\r\n                .every(updatedField => {\r\n                // If the field is an array, we need to check that they are the same length and that all the values are the same\r\n                if (Array.isArray(getApiKeyResponse[updatedField]) &&\r\n                    Array.isArray(updatedFields[updatedField])) {\r\n                    const getApiKeyResponseArray = getApiKeyResponse[updatedField];\r\n                    return (getApiKeyResponseArray.length === updatedFields[updatedField].length &&\r\n                        getApiKeyResponseArray.every((value, index) => value === updatedFields[updatedField][index]));\r\n                }\r\n                else {\r\n                    return getApiKeyResponse[updatedField] === updatedFields[updatedField];\r\n                }\r\n            });\r\n        };\r\n        const wait = (_, waitRequestOptions) => (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n            return getApiKey(base)(apiKey, waitRequestOptions).then(getApiKeyResponse => {\r\n                return hasChanged(getApiKeyResponse) ? Promise.resolve() : retry();\r\n            });\r\n        });\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Put,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s', apiKey),\r\n            data,\r\n        }, options), wait);\r\n    };\r\n};\n\nconst waitAppTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n            return getAppTask(base)(taskID, requestOptions).then(response => {\r\n                return response.status !== 'published' ? retry() : undefined;\r\n            });\r\n        });\r\n    };\r\n};\n\nconst batch = (base) => {\r\n    return (requests, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return waitTask(base)(response.taskID, waitRequestOptions);\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/batch', base.indexName),\r\n            data: {\r\n                requests,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst browseObjects = (base) => {\r\n    return (requestOptions) => {\r\n        return createBrowsablePromise({\r\n            shouldStop: response => response.cursor === undefined,\r\n            ...requestOptions,\r\n            request: (data) => base.transporter.read({\r\n                method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n                path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/browse', base.indexName),\r\n                data,\r\n            }, requestOptions),\r\n        });\r\n    };\r\n};\n\nconst browseRules = (base) => {\r\n    return (requestOptions) => {\r\n        const options = {\r\n            hitsPerPage: 1000,\r\n            ...requestOptions,\r\n        };\r\n        return createBrowsablePromise({\r\n            shouldStop: response => response.hits.length < options.hitsPerPage,\r\n            ...options,\r\n            request(data) {\r\n                return searchRules(base)('', { ...options, ...data }).then((response) => {\r\n                    return {\r\n                        ...response,\r\n                        hits: response.hits.map(rule => {\r\n                            // eslint-disable-next-line functional/immutable-data,no-param-reassign\r\n                            delete rule._highlightResult;\r\n                            return rule;\r\n                        }),\r\n                    };\r\n                });\r\n            },\r\n        });\r\n    };\r\n};\n\nconst browseSynonyms = (base) => {\r\n    return (requestOptions) => {\r\n        const options = {\r\n            hitsPerPage: 1000,\r\n            ...requestOptions,\r\n        };\r\n        return createBrowsablePromise({\r\n            shouldStop: response => response.hits.length < options.hitsPerPage,\r\n            ...options,\r\n            request(data) {\r\n                return searchSynonyms(base)('', { ...options, ...data }).then((response) => {\r\n                    return {\r\n                        ...response,\r\n                        hits: response.hits.map(synonym => {\r\n                            // eslint-disable-next-line functional/immutable-data,no-param-reassign\r\n                            delete synonym._highlightResult;\r\n                            return synonym;\r\n                        }),\r\n                    };\r\n                });\r\n            },\r\n        });\r\n    };\r\n};\n\nconst chunkedBatch = (base) => {\r\n    return (bodies, action, requestOptions) => {\r\n        const { batchSize, ...options } = requestOptions || {};\r\n        const response = {\r\n            taskIDs: [],\r\n            objectIDs: [],\r\n        };\r\n        const forEachBatch = (lastIndex = 0) => {\r\n            // eslint-disable-next-line functional/prefer-readonly-type\r\n            const bodiesChunk = [];\r\n            // eslint-disable-next-line functional/no-let\r\n            let index;\r\n            /* eslint-disable-next-line functional/no-loop-statement */\r\n            for (index = lastIndex; index < bodies.length; index++) {\r\n                // eslint-disable-next-line functional/immutable-data\r\n                bodiesChunk.push(bodies[index]);\r\n                if (bodiesChunk.length === (batchSize || 1000)) {\r\n                    break;\r\n                }\r\n            }\r\n            if (bodiesChunk.length === 0) {\r\n                return Promise.resolve(response);\r\n            }\r\n            return batch(base)(bodiesChunk.map(body => {\r\n                return {\r\n                    action,\r\n                    body,\r\n                };\r\n            }), options).then(res => {\r\n                response.objectIDs = response.objectIDs.concat(res.objectIDs); // eslint-disable-line functional/immutable-data\r\n                response.taskIDs.push(res.taskID); // eslint-disable-line functional/immutable-data\r\n                index++;\r\n                return forEachBatch(index);\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(forEachBatch(), (chunkedBatchResponse, waitRequestOptions) => {\r\n            return Promise.all(chunkedBatchResponse.taskIDs.map(taskID => {\r\n                return waitTask(base)(taskID, waitRequestOptions);\r\n            }));\r\n        });\r\n    };\r\n};\n\nconst clearObjects = (base) => {\r\n    return (requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/clear', base.indexName),\r\n        }, requestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst clearRules = (base) => {\r\n    return (requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/clear', base.indexName),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst clearSynonyms = (base) => {\r\n    return (requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/clear', base.indexName),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteBy = (base) => {\r\n    return (filters, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/deleteByQuery', base.indexName),\r\n            data: filters,\r\n        }, requestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteIndex = (base) => {\r\n    return (requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s', base.indexName),\r\n        }, requestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteObject = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(deleteObjects(base)([objectID], requestOptions).then(response => {\r\n            return { taskID: response.taskIDs[0] };\r\n        }), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteObjects = (base) => {\r\n    return (objectIDs, requestOptions) => {\r\n        const objects = objectIDs.map(objectID => {\r\n            return { objectID };\r\n        });\r\n        return chunkedBatch(base)(objects, BatchActionEnum.DeleteObject, requestOptions);\r\n    };\r\n};\n\nconst deleteRule = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/%s', base.indexName, objectID),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteSynonym = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/%s', base.indexName, objectID),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst exists = (base) => {\r\n    return (requestOptions) => {\r\n        return getSettings(base)(requestOptions)\r\n            .then(() => true)\r\n            .catch(error => {\r\n            if (error.status !== 404) {\r\n                throw error;\r\n            }\r\n            return false;\r\n        });\r\n    };\r\n};\n\nconst findAnswers = (base) => {\r\n    return (query, queryLanguages, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/answers/%s/prediction', base.indexName),\r\n            data: {\r\n                query,\r\n                queryLanguages,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst findObject = (base) => {\r\n    return (callback, requestOptions) => {\r\n        const { query, paginate, ...options } = requestOptions || {};\r\n        // eslint-disable-next-line functional/no-let\r\n        let page = 0;\r\n        const forEachPage = () => {\r\n            return search(base)(query || '', { ...options, page }).then(result => {\r\n                // eslint-disable-next-line functional/no-loop-statement\r\n                for (const [position, hit] of Object.entries(result.hits)) {\r\n                    // eslint-disable-next-line promise/no-callback-in-promise\r\n                    if (callback(hit)) {\r\n                        return {\r\n                            object: hit,\r\n                            position: parseInt(position, 10),\r\n                            page,\r\n                        };\r\n                    }\r\n                }\r\n                page++;\r\n                // paginate if option was set and has next page\r\n                if (paginate === false || page >= result.nbPages) {\r\n                    throw createObjectNotFoundError();\r\n                }\r\n                return forEachPage();\r\n            });\r\n        };\r\n        return forEachPage();\r\n    };\r\n};\n\nconst getObject = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/%s', base.indexName, objectID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getObjectPosition = () => {\r\n    return (searchResponse, objectID) => {\r\n        // eslint-disable-next-line functional/no-loop-statement\r\n        for (const [position, hit] of Object.entries(searchResponse.hits)) {\r\n            if (hit.objectID === objectID) {\r\n                return parseInt(position, 10);\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n};\n\nconst getObjects = (base) => {\r\n    return (objectIDs, requestOptions) => {\r\n        const { attributesToRetrieve, ...options } = requestOptions || {};\r\n        const requests = objectIDs.map(objectID => {\r\n            return {\r\n                indexName: base.indexName,\r\n                objectID,\r\n                ...(attributesToRetrieve ? { attributesToRetrieve } : {}),\r\n            };\r\n        });\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/objects',\r\n            data: {\r\n                requests,\r\n            },\r\n        }, options);\r\n    };\r\n};\n\nconst getRule = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/%s', base.indexName, objectID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getSettings = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/settings', base.indexName),\r\n            data: {\r\n                getVersion: 2,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getSynonym = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)(`1/indexes/%s/synonyms/%s`, base.indexName, objectID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/task/%s', base.indexName, taskID.toString()),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst partialUpdateObject = (base) => {\r\n    return (object, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(partialUpdateObjects(base)([object], requestOptions).then(response => {\r\n            return {\r\n                objectID: response.objectIDs[0],\r\n                taskID: response.taskIDs[0],\r\n            };\r\n        }), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst partialUpdateObjects = (base) => {\r\n    return (objects, requestOptions) => {\r\n        const { createIfNotExists, ...options } = requestOptions || {};\r\n        const action = createIfNotExists\r\n            ? BatchActionEnum.PartialUpdateObject\r\n            : BatchActionEnum.PartialUpdateObjectNoCreate;\r\n        return chunkedBatch(base)(objects, action, options);\r\n    };\r\n};\n\nconst replaceAllObjects = (base) => {\r\n    return (objects, requestOptions) => {\r\n        const { safe, autoGenerateObjectIDIfNotExist, batchSize, ...options } = requestOptions || {};\r\n        const operation = (from, to, type, operationRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n                method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n                path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/operation', from),\r\n                data: {\r\n                    operation: type,\r\n                    destination: to,\r\n                },\r\n            }, operationRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n        };\r\n        const randomSuffix = Math.random()\r\n            .toString(36)\r\n            .substring(7);\r\n        const temporaryIndexName = `${base.indexName}_tmp_${randomSuffix}`;\r\n        const saveObjectsInTemporary = saveObjects({\r\n            appId: base.appId,\r\n            transporter: base.transporter,\r\n            indexName: temporaryIndexName,\r\n        });\r\n        // @ts-ignore\r\n        // eslint-disable-next-line prefer-const, functional/no-let, functional/prefer-readonly-type\r\n        let responses = [];\r\n        const copyWaitablePromise = operation(base.indexName, temporaryIndexName, 'copy', {\r\n            ...options,\r\n            scope: ['settings', 'synonyms', 'rules'],\r\n        });\r\n        // eslint-disable-next-line functional/immutable-data\r\n        responses.push(copyWaitablePromise);\r\n        const result = (safe\r\n            ? copyWaitablePromise.wait(options)\r\n            : copyWaitablePromise)\r\n            .then(() => {\r\n            const saveObjectsWaitablePromise = saveObjectsInTemporary(objects, {\r\n                ...options,\r\n                autoGenerateObjectIDIfNotExist,\r\n                batchSize,\r\n            });\r\n            // eslint-disable-next-line functional/immutable-data\r\n            responses.push(saveObjectsWaitablePromise);\r\n            return safe ? saveObjectsWaitablePromise.wait(options) : saveObjectsWaitablePromise;\r\n        })\r\n            .then(() => {\r\n            const moveWaitablePromise = operation(temporaryIndexName, base.indexName, 'move', options);\r\n            // eslint-disable-next-line functional/immutable-data\r\n            responses.push(moveWaitablePromise);\r\n            return safe ? moveWaitablePromise.wait(options) : moveWaitablePromise;\r\n        })\r\n            .then(() => Promise.all(responses))\r\n            .then(([copyResponse, saveObjectsResponse, moveResponse]) => {\r\n            return {\r\n                objectIDs: saveObjectsResponse.objectIDs,\r\n                taskIDs: [copyResponse.taskID, ...saveObjectsResponse.taskIDs, moveResponse.taskID],\r\n            };\r\n        });\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(result, (_, waitRequestOptions) => {\r\n            return Promise.all(responses.map(response => response.wait(waitRequestOptions)));\r\n        });\r\n    };\r\n};\n\nconst replaceAllRules = (base) => {\r\n    return (rules, requestOptions) => {\r\n        return saveRules(base)(rules, {\r\n            ...requestOptions,\r\n            clearExistingRules: true,\r\n        });\r\n    };\r\n};\n\nconst replaceAllSynonyms = (base) => {\r\n    return (synonyms, requestOptions) => {\r\n        return saveSynonyms(base)(synonyms, {\r\n            ...requestOptions,\r\n            clearExistingSynonyms: true,\r\n        });\r\n    };\r\n};\n\nconst saveObject = (base) => {\r\n    return (object, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(saveObjects(base)([object], requestOptions).then(response => {\r\n            return {\r\n                objectID: response.objectIDs[0],\r\n                taskID: response.taskIDs[0],\r\n            };\r\n        }), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst saveObjects = (base) => {\r\n    return (objects, requestOptions) => {\r\n        const { autoGenerateObjectIDIfNotExist, ...options } = requestOptions || {};\r\n        const action = autoGenerateObjectIDIfNotExist\r\n            ? BatchActionEnum.AddObject\r\n            : BatchActionEnum.UpdateObject;\r\n        if (action === BatchActionEnum.UpdateObject) {\r\n            // eslint-disable-next-line functional/no-loop-statement\r\n            for (const object of objects) {\r\n                if (object.objectID === undefined) {\r\n                    return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(Promise.reject(createMissingObjectIDError()));\r\n                }\r\n            }\r\n        }\r\n        return chunkedBatch(base)(objects, action, options);\r\n    };\r\n};\n\nconst saveRule = (base) => {\r\n    return (rule, requestOptions) => {\r\n        return saveRules(base)([rule], requestOptions);\r\n    };\r\n};\n\nconst saveRules = (base) => {\r\n    return (rules, requestOptions) => {\r\n        const { forwardToReplicas, clearExistingRules, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        if (clearExistingRules) {\r\n            mappedRequestOptions.queryParameters.clearExistingRules = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/batch', base.indexName),\r\n            data: rules,\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst saveSynonym = (base) => {\r\n    return (synonym, requestOptions) => {\r\n        return saveSynonyms(base)([synonym], requestOptions);\r\n    };\r\n};\n\nconst saveSynonyms = (base) => {\r\n    return (synonyms, requestOptions) => {\r\n        const { forwardToReplicas, clearExistingSynonyms, replaceExistingSynonyms, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        if (replaceExistingSynonyms || clearExistingSynonyms) {\r\n            mappedRequestOptions.queryParameters.replaceExistingSynonyms = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/batch', base.indexName),\r\n            data: synonyms,\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst search = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/query', base.indexName),\r\n            data: {\r\n                query,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchForFacetValues = (base) => {\r\n    return (facetName, facetQuery, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/facets/%s/query', base.indexName, facetName),\r\n            data: {\r\n                facetQuery,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchRules = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/search', base.indexName),\r\n            data: {\r\n                query,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchSynonyms = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/search', base.indexName),\r\n            data: {\r\n                query,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst setSettings = (base) => {\r\n    return (settings, requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Put,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/settings', base.indexName),\r\n            data: settings,\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst waitTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n            return getTask(base)(taskID, requestOptions).then(response => {\r\n                return response.status !== 'published' ? retry() : undefined;\r\n            });\r\n        });\r\n    };\r\n};\n\nconst ApiKeyACLEnum = {\r\n    AddObject: 'addObject',\r\n    Analytics: 'analytics',\r\n    Browser: 'browse',\r\n    DeleteIndex: 'deleteIndex',\r\n    DeleteObject: 'deleteObject',\r\n    EditSettings: 'editSettings',\r\n    Inference: 'inference',\r\n    ListIndexes: 'listIndexes',\r\n    Logs: 'logs',\r\n    Personalization: 'personalization',\r\n    Recommendation: 'recommendation',\r\n    Search: 'search',\r\n    SeeUnretrievableAttributes: 'seeUnretrievableAttributes',\r\n    Settings: 'settings',\r\n    Usage: 'usage',\r\n};\n\nconst BatchActionEnum = {\r\n    AddObject: 'addObject',\r\n    UpdateObject: 'updateObject',\r\n    PartialUpdateObject: 'partialUpdateObject',\r\n    PartialUpdateObjectNoCreate: 'partialUpdateObjectNoCreate',\r\n    DeleteObject: 'deleteObject',\r\n    DeleteIndex: 'delete',\r\n    ClearIndex: 'clear',\r\n};\n\nconst ScopeEnum = {\r\n    Settings: 'settings',\r\n    Synonyms: 'synonyms',\r\n    Rules: 'rules',\r\n};\n\nconst StrategyEnum = {\r\n    None: 'none',\r\n    StopIfEnoughMatches: 'stopIfEnoughMatches',\r\n};\n\nconst SynonymEnum = {\r\n    Synonym: 'synonym',\r\n    OneWaySynonym: 'oneWaySynonym',\r\n    AltCorrection1: 'altCorrection1',\r\n    AltCorrection2: 'altCorrection2',\r\n    Placeholder: 'placeholder',\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/client-search/dist/client-search.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/events/events.js":
/*!************************************************!*\
  !*** ./node_modules/@algolia/events/events.js ***!
  \************************************************/
/***/ ((module) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvZXZlbnRzL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKLHFCQUFxQixRQUFRO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoLWV4cGxvcmVyLy4vbm9kZV9tb2R1bGVzL0BhbGdvbGlhL2V2ZW50cy9ldmVudHMuanM/YjUyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG4vLyBFdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpXG4gICAgICByZXR1cm4gMTtcbiAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/events/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/logger-common/dist/logger-common.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@algolia/logger-common/dist/logger-common.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevelEnum: () => (/* binding */ LogLevelEnum),\n/* harmony export */   createNullLogger: () => (/* binding */ createNullLogger)\n/* harmony export */ });\nfunction createNullLogger() {\r\n    return {\r\n        debug(_message, _args) {\r\n            return Promise.resolve();\r\n        },\r\n        info(_message, _args) {\r\n            return Promise.resolve();\r\n        },\r\n        error(_message, _args) {\r\n            return Promise.resolve();\r\n        },\r\n    };\r\n}\n\nconst LogLevelEnum = {\r\n    Debug: 1,\r\n    Info: 2,\r\n    Error: 3,\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvbG9nZ2VyLWNvbW1vbi9kaXN0L2xvZ2dlci1jb21tb24uZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGgtZXhwbG9yZXIvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvbG9nZ2VyLWNvbW1vbi9kaXN0L2xvZ2dlci1jb21tb24uZXNtLmpzPzIxYzIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY3JlYXRlTnVsbExvZ2dlcigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGVidWcoX21lc3NhZ2UsIF9hcmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluZm8oX21lc3NhZ2UsIF9hcmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yKF9tZXNzYWdlLCBfYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cblxuY29uc3QgTG9nTGV2ZWxFbnVtID0ge1xyXG4gICAgRGVidWc6IDEsXHJcbiAgICBJbmZvOiAyLFxyXG4gICAgRXJyb3I6IDMsXHJcbn07XG5cbmV4cG9ydCB7IExvZ0xldmVsRW51bSwgY3JlYXRlTnVsbExvZ2dlciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/logger-common/dist/logger-common.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/recommend/dist/recommend.cjs.js":
/*!***************************************************************!*\
  !*** ./node_modules/@algolia/recommend/dist/recommend.cjs.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar cacheCommon = __webpack_require__(/*! @algolia/cache-common */ \"(ssr)/./node_modules/@algolia/cache-common/dist/cache-common.esm.js\");\nvar cacheInMemory = __webpack_require__(/*! @algolia/cache-in-memory */ \"(ssr)/./node_modules/@algolia/cache-in-memory/dist/cache-in-memory.esm.js\");\nvar clientCommon = __webpack_require__(/*! @algolia/client-common */ \"(ssr)/./node_modules/@algolia/client-common/dist/client-common.esm.js\");\nvar loggerCommon = __webpack_require__(/*! @algolia/logger-common */ \"(ssr)/./node_modules/@algolia/logger-common/dist/logger-common.esm.js\");\nvar requesterNodeHttp = __webpack_require__(/*! @algolia/requester-node-http */ \"(ssr)/./node_modules/@algolia/requester-node-http/dist/requester-node-http.esm.js\");\nvar transporter = __webpack_require__(/*! @algolia/transporter */ \"(ssr)/./node_modules/@algolia/transporter/dist/transporter.esm.js\");\nvar requesterCommon = __webpack_require__(/*! @algolia/requester-common */ \"(ssr)/./node_modules/@algolia/requester-common/dist/requester-common.esm.js\");\n\nconst createRecommendClient = options => {\r\n    const appId = options.appId;\r\n    const auth = clientCommon.createAuth(options.authMode !== undefined ? options.authMode : clientCommon.AuthMode.WithinHeaders, appId, options.apiKey);\r\n    const transporter$1 = transporter.createTransporter({\r\n        hosts: [\r\n            { url: `${appId}-dsn.algolia.net`, accept: transporter.CallEnum.Read },\r\n            { url: `${appId}.algolia.net`, accept: transporter.CallEnum.Write },\r\n        ].concat(clientCommon.shuffle([\r\n            { url: `${appId}-1.algolianet.com` },\r\n            { url: `${appId}-2.algolianet.com` },\r\n            { url: `${appId}-3.algolianet.com` },\r\n        ])),\r\n        ...options,\r\n        headers: {\r\n            ...auth.headers(),\r\n            ...{ 'content-type': 'application/x-www-form-urlencoded' },\r\n            ...options.headers,\r\n        },\r\n        queryParameters: {\r\n            ...auth.queryParameters(),\r\n            ...options.queryParameters,\r\n        },\r\n    });\r\n    const base = {\r\n        transporter: transporter$1,\r\n        appId,\r\n        addAlgoliaAgent(segment, version) {\r\n            transporter$1.userAgent.add({ segment, version });\r\n        },\r\n        clearCache() {\r\n            return Promise.all([\r\n                transporter$1.requestsCache.clear(),\r\n                transporter$1.responsesCache.clear(),\r\n            ]).then(() => undefined);\r\n        },\r\n    };\r\n    return clientCommon.addMethods(base, options.methods);\r\n};\n\nconst getRecommendations = base => {\r\n    return (queries, requestOptions) => {\r\n        const requests = queries.map(query => ({\r\n            ...query,\r\n            // The `threshold` param is required by the endpoint to make it easier\r\n            // to provide a default value later, so we default it in the client\r\n            // so that users don't have to provide a value.\r\n            threshold: query.threshold || 0,\r\n        }));\r\n        return base.transporter.read({\r\n            method: requesterCommon.MethodEnum.Post,\r\n            path: '1/indexes/*/recommendations',\r\n            data: {\r\n                requests,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getFrequentlyBoughtTogether = base => {\r\n    return (queries, requestOptions) => {\r\n        return getRecommendations(base)(queries.map(query => ({\r\n            ...query,\r\n            fallbackParameters: {},\r\n            model: 'bought-together',\r\n        })), requestOptions);\r\n    };\r\n};\n\nconst getRelatedProducts = base => {\r\n    return (queries, requestOptions) => {\r\n        return getRecommendations(base)(queries.map(query => ({\r\n            ...query,\r\n            model: 'related-products',\r\n        })), requestOptions);\r\n    };\r\n};\n\nconst getTrendingFacets = base => {\r\n    return (queries, requestOptions) => {\r\n        const requests = queries.map(query => ({\r\n            ...query,\r\n            model: 'trending-facets',\r\n            // The `threshold` param is required by the endpoint to make it easier\r\n            // to provide a default value later, so we default it in the client\r\n            // so that users don't have to provide a value.\r\n            threshold: query.threshold || 0,\r\n        }));\r\n        return base.transporter.read({\r\n            method: requesterCommon.MethodEnum.Post,\r\n            path: '1/indexes/*/recommendations',\r\n            data: {\r\n                requests,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getTrendingItems = base => {\r\n    return (queries, requestOptions) => {\r\n        const requests = queries.map(query => ({\r\n            ...query,\r\n            model: 'trending-items',\r\n            // The `threshold` param is required by the endpoint to make it easier\r\n            // to provide a default value later, so we default it in the client\r\n            // so that users don't have to provide a value.\r\n            threshold: query.threshold || 0,\r\n        }));\r\n        return base.transporter.read({\r\n            method: requesterCommon.MethodEnum.Post,\r\n            path: '1/indexes/*/recommendations',\r\n            data: {\r\n                requests,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getLookingSimilar = base => {\r\n    return (queries, requestOptions) => {\r\n        return getRecommendations(base)(queries.map(query => ({\r\n            ...query,\r\n            model: 'looking-similar',\r\n        })), requestOptions);\r\n    };\r\n};\n\nconst getRecommendedForYou = base => {\r\n    return (queries, requestOptions) => {\r\n        const requests = queries.map(query => ({\r\n            ...query,\r\n            model: 'recommended-for-you',\r\n            threshold: query.threshold || 0,\r\n        }));\r\n        return base.transporter.read({\r\n            method: requesterCommon.MethodEnum.Post,\r\n            path: '1/indexes/*/recommendations',\r\n            data: {\r\n                requests,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nfunction recommend(appId, apiKey, options) {\r\n    const commonOptions = {\r\n        appId,\r\n        apiKey,\r\n        timeouts: {\r\n            connect: 2,\r\n            read: 5,\r\n            write: 30,\r\n        },\r\n        requester: requesterNodeHttp.createNodeHttpRequester(),\r\n        logger: loggerCommon.createNullLogger(),\r\n        responsesCache: cacheCommon.createNullCache(),\r\n        requestsCache: cacheCommon.createNullCache(),\r\n        hostsCache: cacheInMemory.createInMemoryCache(),\r\n        userAgent: transporter.createUserAgent(clientCommon.version)\r\n            .add({ segment: 'Recommend', version: clientCommon.version })\r\n            .add({ segment: 'Node.js', version: process.versions.node }),\r\n    };\r\n    return createRecommendClient({\r\n        ...commonOptions,\r\n        ...options,\r\n        methods: {\r\n            destroy: clientCommon.destroy,\r\n            getFrequentlyBoughtTogether,\r\n            getRecommendations,\r\n            getRelatedProducts,\r\n            getTrendingFacets,\r\n            getTrendingItems,\r\n            getLookingSimilar,\r\n            getRecommendedForYou,\r\n        },\r\n    });\r\n}\r\n/* eslint-disable functional/immutable-data */\r\nrecommend.version = clientCommon.version;\r\nrecommend.getFrequentlyBoughtTogether = getFrequentlyBoughtTogether;\r\nrecommend.getRecommendations = getRecommendations;\r\nrecommend.getRelatedProducts = getRelatedProducts;\r\nrecommend.getTrendingFacets = getTrendingFacets;\r\nrecommend.getTrendingItems = getTrendingItems;\r\nrecommend.getLookingSimilar = getLookingSimilar;\r\nrecommend.getRecommendedForYou = getRecommendedForYou;\n\nmodule.exports = recommend;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/recommend/dist/recommend.cjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/recommend/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@algolia/recommend/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable functional/immutable-data, import/no-commonjs */\nconst recommend = __webpack_require__(/*! ./dist/recommend.cjs.js */ \"(ssr)/./node_modules/@algolia/recommend/dist/recommend.cjs.js\");\n\n/**\n * The Common JS build is the default entry point for the Node environment. Keep in\n * in mind, that for the browser environment, we hint the bundler to use the UMD\n * build instead as specified on the key `browser` of our `package.json` file.\n */\nmodule.exports = recommend;\n\n/**\n * In addition, we also set explicitly the default export below making\n * this Common JS module in compliance with es6 modules specification.\n */\nmodule.exports[\"default\"] = recommend;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvcmVjb21tZW5kL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsOEZBQXlCOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGgtZXhwbG9yZXIvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvcmVjb21tZW5kL2luZGV4LmpzPzZmOWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgZnVuY3Rpb25hbC9pbW11dGFibGUtZGF0YSwgaW1wb3J0L25vLWNvbW1vbmpzICovXG5jb25zdCByZWNvbW1lbmQgPSByZXF1aXJlKCcuL2Rpc3QvcmVjb21tZW5kLmNqcy5qcycpO1xuXG4vKipcbiAqIFRoZSBDb21tb24gSlMgYnVpbGQgaXMgdGhlIGRlZmF1bHQgZW50cnkgcG9pbnQgZm9yIHRoZSBOb2RlIGVudmlyb25tZW50LiBLZWVwIGluXG4gKiBpbiBtaW5kLCB0aGF0IGZvciB0aGUgYnJvd3NlciBlbnZpcm9ubWVudCwgd2UgaGludCB0aGUgYnVuZGxlciB0byB1c2UgdGhlIFVNRFxuICogYnVpbGQgaW5zdGVhZCBhcyBzcGVjaWZpZWQgb24gdGhlIGtleSBgYnJvd3NlcmAgb2Ygb3VyIGBwYWNrYWdlLmpzb25gIGZpbGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcmVjb21tZW5kO1xuXG4vKipcbiAqIEluIGFkZGl0aW9uLCB3ZSBhbHNvIHNldCBleHBsaWNpdGx5IHRoZSBkZWZhdWx0IGV4cG9ydCBiZWxvdyBtYWtpbmdcbiAqIHRoaXMgQ29tbW9uIEpTIG1vZHVsZSBpbiBjb21wbGlhbmNlIHdpdGggZXM2IG1vZHVsZXMgc3BlY2lmaWNhdGlvbi5cbiAqL1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IHJlY29tbWVuZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/recommend/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/requester-common/dist/requester-common.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@algolia/requester-common/dist/requester-common.esm.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MethodEnum: () => (/* binding */ MethodEnum)\n/* harmony export */ });\nconst MethodEnum = {\r\n    Delete: 'DELETE',\r\n    Get: 'GET',\r\n    Post: 'POST',\r\n    Put: 'PUT',\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvcmVxdWVzdGVyLWNvbW1vbi9kaXN0L3JlcXVlc3Rlci1jb21tb24uZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoLWV4cGxvcmVyLy4vbm9kZV9tb2R1bGVzL0BhbGdvbGlhL3JlcXVlc3Rlci1jb21tb24vZGlzdC9yZXF1ZXN0ZXItY29tbW9uLmVzbS5qcz85NjdkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1ldGhvZEVudW0gPSB7XHJcbiAgICBEZWxldGU6ICdERUxFVEUnLFxyXG4gICAgR2V0OiAnR0VUJyxcclxuICAgIFBvc3Q6ICdQT1NUJyxcclxuICAgIFB1dDogJ1BVVCcsXHJcbn07XG5cbmV4cG9ydCB7IE1ldGhvZEVudW0gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/requester-common/dist/requester-common.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/requester-node-http/dist/requester-node-http.esm.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@algolia/requester-node-http/dist/requester-node-http.esm.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNodeHttpRequester: () => (/* binding */ createNodeHttpRequester)\n/* harmony export */ });\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\n\n/* eslint functional/prefer-readonly-type: 0 */\r\nconst agentOptions = { keepAlive: true };\r\nconst defaultHttpAgent = new http__WEBPACK_IMPORTED_MODULE_0__.Agent(agentOptions);\r\nconst defaultHttpsAgent = new https__WEBPACK_IMPORTED_MODULE_1__.Agent(agentOptions);\r\nfunction createNodeHttpRequester({ agent: userGlobalAgent, httpAgent: userHttpAgent, httpsAgent: userHttpsAgent, requesterOptions = {}, } = {}) {\r\n    const httpAgent = userHttpAgent || userGlobalAgent || defaultHttpAgent;\r\n    const httpsAgent = userHttpsAgent || userGlobalAgent || defaultHttpsAgent;\r\n    return {\r\n        send(request) {\r\n            return new Promise(resolve => {\r\n                const url = (0,url__WEBPACK_IMPORTED_MODULE_2__.parse)(request.url);\r\n                const path = url.query === null ? url.pathname : `${url.pathname}?${url.query}`;\r\n                const options = {\r\n                    ...requesterOptions,\r\n                    agent: url.protocol === 'https:' ? httpsAgent : httpAgent,\r\n                    hostname: url.hostname,\r\n                    path,\r\n                    method: request.method,\r\n                    headers: {\r\n                        ...(requesterOptions && requesterOptions.headers ? requesterOptions.headers : {}),\r\n                        ...request.headers,\r\n                    },\r\n                    ...(url.port !== undefined ? { port: url.port || '' } : {}),\r\n                };\r\n                const req = (url.protocol === 'https:' ? https__WEBPACK_IMPORTED_MODULE_1__ : http__WEBPACK_IMPORTED_MODULE_0__).request(options, response => {\r\n                    // eslint-disable-next-line functional/no-let\r\n                    let contentBuffers = [];\r\n                    response.on('data', chunk => {\r\n                        contentBuffers = contentBuffers.concat(chunk);\r\n                    });\r\n                    response.on('end', () => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n                        clearTimeout(connectTimeout);\r\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n                        clearTimeout(responseTimeout);\r\n                        resolve({\r\n                            status: response.statusCode || 0,\r\n                            content: Buffer.concat(contentBuffers).toString(),\r\n                            isTimedOut: false,\r\n                        });\r\n                    });\r\n                });\r\n                const createTimeout = (timeout, content) => {\r\n                    return setTimeout(() => {\r\n                        req.abort();\r\n                        resolve({\r\n                            status: 0,\r\n                            content,\r\n                            isTimedOut: true,\r\n                        });\r\n                    }, timeout * 1000);\r\n                };\r\n                const connectTimeout = createTimeout(request.connectTimeout, 'Connection timeout');\r\n                // eslint-disable-next-line functional/no-let\r\n                let responseTimeout;\r\n                req.on('error', error => {\r\n                    clearTimeout(connectTimeout);\r\n                    clearTimeout(responseTimeout);\r\n                    resolve({ status: 0, content: error.message, isTimedOut: false });\r\n                });\r\n                req.once('response', () => {\r\n                    clearTimeout(connectTimeout);\r\n                    responseTimeout = createTimeout(request.responseTimeout, 'Socket timeout');\r\n                });\r\n                if (request.data !== undefined) {\r\n                    req.write(request.data);\r\n                }\r\n                req.end();\r\n            });\r\n        },\r\n        destroy() {\r\n            httpAgent.destroy();\r\n            httpsAgent.destroy();\r\n            return Promise.resolve();\r\n        },\r\n    };\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsZ29saWEvcmVxdWVzdGVyLW5vZGUtaHR0cC9kaXN0L3JlcXVlc3Rlci1ub2RlLWh0dHAuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNkI7QUFDQTtBQUNFO0FBQ1U7QUFDYjs7QUFFNUI7QUFDQSx1QkFBdUI7QUFDdkIsNkJBQTZCLHVDQUFLO0FBQ2xDLDhCQUE4Qix3Q0FBTztBQUNyQyxtQ0FBbUMsbUdBQW1HLElBQUksSUFBSTtBQUM5STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDBDQUFLO0FBQ2pDLG9FQUFvRSxhQUFhLEdBQUcsVUFBVTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdHQUF3RztBQUN4RztBQUNBLHFCQUFxQjtBQUNyQixtREFBbUQsdUJBQXVCLElBQUk7QUFDOUU7QUFDQSx5REFBeUQsa0NBQUssR0FBRyxpQ0FBSTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsc0RBQXNEO0FBQ3BGLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoLWV4cGxvcmVyLy4vbm9kZV9tb2R1bGVzL0BhbGdvbGlhL3JlcXVlc3Rlci1ub2RlLWh0dHAvZGlzdC9yZXF1ZXN0ZXItbm9kZS1odHRwLmVzbS5qcz85YTU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgeyBBZ2VudCB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0ICogYXMgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IHsgQWdlbnQgYXMgQWdlbnQkMSB9IGZyb20gJ2h0dHBzJztcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSAndXJsJztcblxuLyogZXNsaW50IGZ1bmN0aW9uYWwvcHJlZmVyLXJlYWRvbmx5LXR5cGU6IDAgKi9cclxuY29uc3QgYWdlbnRPcHRpb25zID0geyBrZWVwQWxpdmU6IHRydWUgfTtcclxuY29uc3QgZGVmYXVsdEh0dHBBZ2VudCA9IG5ldyBBZ2VudChhZ2VudE9wdGlvbnMpO1xyXG5jb25zdCBkZWZhdWx0SHR0cHNBZ2VudCA9IG5ldyBBZ2VudCQxKGFnZW50T3B0aW9ucyk7XHJcbmZ1bmN0aW9uIGNyZWF0ZU5vZGVIdHRwUmVxdWVzdGVyKHsgYWdlbnQ6IHVzZXJHbG9iYWxBZ2VudCwgaHR0cEFnZW50OiB1c2VySHR0cEFnZW50LCBodHRwc0FnZW50OiB1c2VySHR0cHNBZ2VudCwgcmVxdWVzdGVyT3B0aW9ucyA9IHt9LCB9ID0ge30pIHtcclxuICAgIGNvbnN0IGh0dHBBZ2VudCA9IHVzZXJIdHRwQWdlbnQgfHwgdXNlckdsb2JhbEFnZW50IHx8IGRlZmF1bHRIdHRwQWdlbnQ7XHJcbiAgICBjb25zdCBodHRwc0FnZW50ID0gdXNlckh0dHBzQWdlbnQgfHwgdXNlckdsb2JhbEFnZW50IHx8IGRlZmF1bHRIdHRwc0FnZW50O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZW5kKHJlcXVlc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gcGFyc2UocmVxdWVzdC51cmwpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IHVybC5xdWVyeSA9PT0gbnVsbCA/IHVybC5wYXRobmFtZSA6IGAke3VybC5wYXRobmFtZX0/JHt1cmwucXVlcnl9YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVxdWVzdGVyT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICBhZ2VudDogdXJsLnByb3RvY29sID09PSAnaHR0cHM6JyA/IGh0dHBzQWdlbnQgOiBodHRwQWdlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdG5hbWU6IHVybC5ob3N0bmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4ocmVxdWVzdGVyT3B0aW9ucyAmJiByZXF1ZXN0ZXJPcHRpb25zLmhlYWRlcnMgPyByZXF1ZXN0ZXJPcHRpb25zLmhlYWRlcnMgOiB7fSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJlcXVlc3QuaGVhZGVycyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC4uLih1cmwucG9ydCAhPT0gdW5kZWZpbmVkID8geyBwb3J0OiB1cmwucG9ydCB8fCAnJyB9IDoge30pLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcSA9ICh1cmwucHJvdG9jb2wgPT09ICdodHRwczonID8gaHR0cHMgOiBodHRwKS5yZXF1ZXN0KG9wdGlvbnMsIHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9uby1sZXRcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudEJ1ZmZlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5vbignZGF0YScsIGNodW5rID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEJ1ZmZlcnMgPSBjb250ZW50QnVmZmVycy5jb25jYXQoY2h1bmspO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvbm5lY3RUaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVzcG9uc2VUaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c0NvZGUgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IEJ1ZmZlci5jb25jYXQoY29udGVudEJ1ZmZlcnMpLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RpbWVkT3V0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVRpbWVvdXQgPSAodGltZW91dCwgY29udGVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVGltZWRPdXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQgKiAxMDAwKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0VGltZW91dCA9IGNyZWF0ZVRpbWVvdXQocmVxdWVzdC5jb25uZWN0VGltZW91dCwgJ0Nvbm5lY3Rpb24gdGltZW91dCcpO1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvbm8tbGV0XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2VUaW1lb3V0O1xyXG4gICAgICAgICAgICAgICAgcmVxLm9uKCdlcnJvcicsIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY29ubmVjdFRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXNwb25zZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBzdGF0dXM6IDAsIGNvbnRlbnQ6IGVycm9yLm1lc3NhZ2UsIGlzVGltZWRPdXQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXEub25jZSgncmVzcG9uc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvbm5lY3RUaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVRpbWVvdXQgPSBjcmVhdGVUaW1lb3V0KHJlcXVlc3QucmVzcG9uc2VUaW1lb3V0LCAnU29ja2V0IHRpbWVvdXQnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxLndyaXRlKHJlcXVlc3QuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXEuZW5kKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgaHR0cEFnZW50LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgaHR0cHNBZ2VudC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxuXG5leHBvcnQgeyBjcmVhdGVOb2RlSHR0cFJlcXVlc3RlciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/requester-node-http/dist/requester-node-http.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@algolia/transporter/dist/transporter.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@algolia/transporter/dist/transporter.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CallEnum: () => (/* binding */ CallEnum),\n/* harmony export */   HostStatusEnum: () => (/* binding */ HostStatusEnum),\n/* harmony export */   createApiError: () => (/* binding */ createApiError),\n/* harmony export */   createDeserializationError: () => (/* binding */ createDeserializationError),\n/* harmony export */   createMappedRequestOptions: () => (/* binding */ createMappedRequestOptions),\n/* harmony export */   createRetryError: () => (/* binding */ createRetryError),\n/* harmony export */   createStatefulHost: () => (/* binding */ createStatefulHost),\n/* harmony export */   createStatelessHost: () => (/* binding */ createStatelessHost),\n/* harmony export */   createTransporter: () => (/* binding */ createTransporter),\n/* harmony export */   createUserAgent: () => (/* binding */ createUserAgent),\n/* harmony export */   deserializeFailure: () => (/* binding */ deserializeFailure),\n/* harmony export */   deserializeSuccess: () => (/* binding */ deserializeSuccess),\n/* harmony export */   isStatefulHostTimeouted: () => (/* binding */ isStatefulHostTimeouted),\n/* harmony export */   isStatefulHostUp: () => (/* binding */ isStatefulHostUp),\n/* harmony export */   serializeData: () => (/* binding */ serializeData),\n/* harmony export */   serializeHeaders: () => (/* binding */ serializeHeaders),\n/* harmony export */   serializeQueryParameters: () => (/* binding */ serializeQueryParameters),\n/* harmony export */   serializeUrl: () => (/* binding */ serializeUrl),\n/* harmony export */   stackFrameWithoutCredentials: () => (/* binding */ stackFrameWithoutCredentials),\n/* harmony export */   stackTraceWithoutCredentials: () => (/* binding */ stackTraceWithoutCredentials)\n/* harmony export */ });\n/* harmony import */ var _algolia_requester_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/requester-common */ \"(ssr)/./node_modules/@algolia/requester-common/dist/requester-common.esm.js\");\n\n\nfunction createMappedRequestOptions(requestOptions, timeout) {\r\n    const options = requestOptions || {};\r\n    const data = options.data || {};\r\n    Object.keys(options).forEach(key => {\r\n        if (['timeout', 'headers', 'queryParameters', 'data', 'cacheable'].indexOf(key) === -1) {\r\n            data[key] = options[key]; // eslint-disable-line functional/immutable-data\r\n        }\r\n    });\r\n    return {\r\n        data: Object.entries(data).length > 0 ? data : undefined,\r\n        timeout: options.timeout || timeout,\r\n        headers: options.headers || {},\r\n        queryParameters: options.queryParameters || {},\r\n        cacheable: options.cacheable,\r\n    };\r\n}\n\nconst CallEnum = {\r\n    /**\r\n     * If the host is read only.\r\n     */\r\n    Read: 1,\r\n    /**\r\n     * If the host is write only.\r\n     */\r\n    Write: 2,\r\n    /**\r\n     * If the host is both read and write.\r\n     */\r\n    Any: 3,\r\n};\n\nconst HostStatusEnum = {\r\n    Up: 1,\r\n    Down: 2,\r\n    Timeouted: 3,\r\n};\n\n// By default, API Clients at Algolia have expiration delay\r\n// of 5 mins. In the JavaScript client, we have 2 mins.\r\nconst EXPIRATION_DELAY = 2 * 60 * 1000;\r\nfunction createStatefulHost(host, status = HostStatusEnum.Up) {\r\n    return {\r\n        ...host,\r\n        status,\r\n        lastUpdate: Date.now(),\r\n    };\r\n}\r\nfunction isStatefulHostUp(host) {\r\n    return host.status === HostStatusEnum.Up || Date.now() - host.lastUpdate > EXPIRATION_DELAY;\r\n}\r\nfunction isStatefulHostTimeouted(host) {\r\n    return (host.status === HostStatusEnum.Timeouted && Date.now() - host.lastUpdate <= EXPIRATION_DELAY);\r\n}\n\nfunction createStatelessHost(options) {\r\n    if (typeof options === 'string') {\r\n        return {\r\n            protocol: 'https',\r\n            url: options,\r\n            accept: CallEnum.Any,\r\n        };\r\n    }\r\n    return {\r\n        protocol: options.protocol || 'https',\r\n        url: options.url,\r\n        accept: options.accept || CallEnum.Any,\r\n    };\r\n}\n\nfunction createRetryableOptions(hostsCache, statelessHosts) {\r\n    return Promise.all(statelessHosts.map(statelessHost => {\r\n        return hostsCache.get(statelessHost, () => {\r\n            return Promise.resolve(createStatefulHost(statelessHost));\r\n        });\r\n    })).then(statefulHosts => {\r\n        const hostsUp = statefulHosts.filter(host => isStatefulHostUp(host));\r\n        const hostsTimeouted = statefulHosts.filter(host => isStatefulHostTimeouted(host));\r\n        /**\r\n         * Note, we put the hosts that previously timeouted on the end of the list.\r\n         */\r\n        const hostsAvailable = [...hostsUp, ...hostsTimeouted];\r\n        const statelessHostsAvailable = hostsAvailable.length > 0\r\n            ? hostsAvailable.map(host => createStatelessHost(host))\r\n            : statelessHosts;\r\n        return {\r\n            getTimeout(timeoutsCount, baseTimeout) {\r\n                /**\r\n                 * Imagine that you have 4 hosts, if timeouts will increase\r\n                 * on the following way: 1 (timeouted) > 4 (timeouted) > 5 (200)\r\n                 *\r\n                 * Note that, the very next request, we start from the previous timeout\r\n                 *\r\n                 *  5 (timeouted) > 6 (timeouted) > 7 ...\r\n                 *\r\n                 * This strategy may need to be reviewed, but is the strategy on the our\r\n                 * current v3 version.\r\n                 */\r\n                const timeoutMultiplier = hostsTimeouted.length === 0 && timeoutsCount === 0\r\n                    ? 1\r\n                    : hostsTimeouted.length + 3 + timeoutsCount;\r\n                return timeoutMultiplier * baseTimeout;\r\n            },\r\n            statelessHosts: statelessHostsAvailable,\r\n        };\r\n    });\r\n}\n\nconst isNetworkError = ({ isTimedOut, status }) => {\r\n    return !isTimedOut && ~~status === 0;\r\n};\r\nconst isRetryable = (response) => {\r\n    const status = response.status;\r\n    const isTimedOut = response.isTimedOut;\r\n    return (isTimedOut || isNetworkError(response) || (~~(status / 100) !== 2 && ~~(status / 100) !== 4));\r\n};\r\nconst isSuccess = ({ status }) => {\r\n    return ~~(status / 100) === 2;\r\n};\r\nconst retryDecision = (response, outcomes) => {\r\n    if (isRetryable(response)) {\r\n        return outcomes.onRetry(response);\r\n    }\r\n    if (isSuccess(response)) {\r\n        return outcomes.onSuccess(response);\r\n    }\r\n    return outcomes.onFail(response);\r\n};\n\nfunction retryableRequest(transporter, statelessHosts, request, requestOptions) {\r\n    const stackTrace = []; // eslint-disable-line functional/prefer-readonly-type\r\n    /**\r\n     * First we prepare the payload that do not depend from hosts.\r\n     */\r\n    const data = serializeData(request, requestOptions);\r\n    const headers = serializeHeaders(transporter, requestOptions);\r\n    const method = request.method;\r\n    // On `GET`, the data is proxied to query parameters.\r\n    const dataQueryParameters = request.method !== _algolia_requester_common__WEBPACK_IMPORTED_MODULE_0__.MethodEnum.Get\r\n        ? {}\r\n        : {\r\n            ...request.data,\r\n            ...requestOptions.data,\r\n        };\r\n    const queryParameters = {\r\n        'x-algolia-agent': transporter.userAgent.value,\r\n        ...transporter.queryParameters,\r\n        ...dataQueryParameters,\r\n        ...requestOptions.queryParameters,\r\n    };\r\n    let timeoutsCount = 0; // eslint-disable-line functional/no-let\r\n    const retry = (hosts, // eslint-disable-line functional/prefer-readonly-type\r\n    getTimeout) => {\r\n        /**\r\n         * We iterate on each host, until there is no host left.\r\n         */\r\n        const host = hosts.pop(); // eslint-disable-line functional/immutable-data\r\n        if (host === undefined) {\r\n            throw createRetryError(stackTraceWithoutCredentials(stackTrace));\r\n        }\r\n        const payload = {\r\n            data,\r\n            headers,\r\n            method,\r\n            url: serializeUrl(host, request.path, queryParameters),\r\n            connectTimeout: getTimeout(timeoutsCount, transporter.timeouts.connect),\r\n            responseTimeout: getTimeout(timeoutsCount, requestOptions.timeout),\r\n        };\r\n        /**\r\n         * The stackFrame is pushed to the stackTrace so we\r\n         * can have information about onRetry and onFailure\r\n         * decisions.\r\n         */\r\n        const pushToStackTrace = (response) => {\r\n            const stackFrame = {\r\n                request: payload,\r\n                response,\r\n                host,\r\n                triesLeft: hosts.length,\r\n            };\r\n            // eslint-disable-next-line functional/immutable-data\r\n            stackTrace.push(stackFrame);\r\n            return stackFrame;\r\n        };\r\n        const decisions = {\r\n            onSuccess: response => deserializeSuccess(response),\r\n            onRetry(response) {\r\n                const stackFrame = pushToStackTrace(response);\r\n                /**\r\n                 * If response is a timeout, we increaset the number of\r\n                 * timeouts so we can increase the timeout later.\r\n                 */\r\n                if (response.isTimedOut) {\r\n                    timeoutsCount++;\r\n                }\r\n                return Promise.all([\r\n                    /**\r\n                     * Failures are individually send the logger, allowing\r\n                     * the end user to debug / store stack frames even\r\n                     * when a retry error does not happen.\r\n                     */\r\n                    transporter.logger.info('Retryable failure', stackFrameWithoutCredentials(stackFrame)),\r\n                    /**\r\n                     * We also store the state of the host in failure cases. If the host, is\r\n                     * down it will remain down for the next 2 minutes. In a timeout situation,\r\n                     * this host will be added end of the list of hosts on the next request.\r\n                     */\r\n                    transporter.hostsCache.set(host, createStatefulHost(host, response.isTimedOut ? HostStatusEnum.Timeouted : HostStatusEnum.Down)),\r\n                ]).then(() => retry(hosts, getTimeout));\r\n            },\r\n            onFail(response) {\r\n                pushToStackTrace(response);\r\n                throw deserializeFailure(response, stackTraceWithoutCredentials(stackTrace));\r\n            },\r\n        };\r\n        return transporter.requester.send(payload).then(response => {\r\n            return retryDecision(response, decisions);\r\n        });\r\n    };\r\n    /**\r\n     * Finally, for each retryable host perform request until we got a non\r\n     * retryable response. Some notes here:\r\n     *\r\n     * 1. The reverse here is applied so we can apply a `pop` later on => more performant.\r\n     * 2. We also get from the retryable options a timeout multiplier that is tailored\r\n     * for the current context.\r\n     */\r\n    return createRetryableOptions(transporter.hostsCache, statelessHosts).then(options => {\r\n        return retry([...options.statelessHosts].reverse(), options.getTimeout);\r\n    });\r\n}\n\nfunction createTransporter(options) {\r\n    const { hostsCache, logger, requester, requestsCache, responsesCache, timeouts, userAgent, hosts, queryParameters, headers, } = options;\r\n    const transporter = {\r\n        hostsCache,\r\n        logger,\r\n        requester,\r\n        requestsCache,\r\n        responsesCache,\r\n        timeouts,\r\n        userAgent,\r\n        headers,\r\n        queryParameters,\r\n        hosts: hosts.map(host => createStatelessHost(host)),\r\n        read(request, requestOptions) {\r\n            /**\r\n             * First, we compute the user request options. Now, keep in mind,\r\n             * that using request options the user is able to modified the intire\r\n             * payload of the request. Such as headers, query parameters, and others.\r\n             */\r\n            const mappedRequestOptions = createMappedRequestOptions(requestOptions, transporter.timeouts.read);\r\n            const createRetryableRequest = () => {\r\n                /**\r\n                 * Then, we prepare a function factory that contains the construction of\r\n                 * the retryable request. At this point, we may *not* perform the actual\r\n                 * request. But we want to have the function factory ready.\r\n                 */\r\n                return retryableRequest(transporter, transporter.hosts.filter(host => (host.accept & CallEnum.Read) !== 0), request, mappedRequestOptions);\r\n            };\r\n            /**\r\n             * Once we have the function factory ready, we need to determine of the\r\n             * request is \"cacheable\" - should be cached. Note that, once again,\r\n             * the user can force this option.\r\n             */\r\n            const cacheable = mappedRequestOptions.cacheable !== undefined\r\n                ? mappedRequestOptions.cacheable\r\n                : request.cacheable;\r\n            /**\r\n             * If is not \"cacheable\", we immediatly trigger the retryable request, no\r\n             * need to check cache implementations.\r\n             */\r\n            if (cacheable !== true) {\r\n                return createRetryableRequest();\r\n            }\r\n            /**\r\n             * If the request is \"cacheable\", we need to first compute the key to ask\r\n             * the cache implementations if this request is on progress or if the\r\n             * response already exists on the cache.\r\n             */\r\n            const key = {\r\n                request,\r\n                mappedRequestOptions,\r\n                transporter: {\r\n                    queryParameters: transporter.queryParameters,\r\n                    headers: transporter.headers,\r\n                },\r\n            };\r\n            /**\r\n             * With the computed key, we first ask the responses cache\r\n             * implemention if this request was been resolved before.\r\n             */\r\n            return transporter.responsesCache.get(key, () => {\r\n                /**\r\n                 * If the request has never resolved before, we actually ask if there\r\n                 * is a current request with the same key on progress.\r\n                 */\r\n                return transporter.requestsCache.get(key, () => {\r\n                    return (transporter.requestsCache\r\n                        /**\r\n                         * Finally, if there is no request in progress with the same key,\r\n                         * this `createRetryableRequest()` will actually trigger the\r\n                         * retryable request.\r\n                         */\r\n                        .set(key, createRetryableRequest())\r\n                        .then(response => Promise.all([transporter.requestsCache.delete(key), response]), err => Promise.all([transporter.requestsCache.delete(key), Promise.reject(err)]))\r\n                        .then(([_, response]) => response));\r\n                });\r\n            }, {\r\n                /**\r\n                 * Of course, once we get this response back from the server, we\r\n                 * tell response cache to actually store the received response\r\n                 * to be used later.\r\n                 */\r\n                miss: response => transporter.responsesCache.set(key, response),\r\n            });\r\n        },\r\n        write(request, requestOptions) {\r\n            /**\r\n             * On write requests, no cache mechanisms are applied, and we\r\n             * proxy the request immediately to the requester.\r\n             */\r\n            return retryableRequest(transporter, transporter.hosts.filter(host => (host.accept & CallEnum.Write) !== 0), request, createMappedRequestOptions(requestOptions, transporter.timeouts.write));\r\n        },\r\n    };\r\n    return transporter;\r\n}\n\nfunction createUserAgent(version) {\r\n    const userAgent = {\r\n        value: `Algolia for JavaScript (${version})`,\r\n        add(options) {\r\n            const addedUserAgent = `; ${options.segment}${options.version !== undefined ? ` (${options.version})` : ''}`;\r\n            if (userAgent.value.indexOf(addedUserAgent) === -1) {\r\n                // eslint-disable-next-line functional/immutable-data\r\n                userAgent.value = `${userAgent.value}${addedUserAgent}`;\r\n            }\r\n            return userAgent;\r\n        },\r\n    };\r\n    return userAgent;\r\n}\n\nfunction deserializeSuccess(response) {\r\n    // eslint-disable-next-line functional/no-try-statement\r\n    try {\r\n        return JSON.parse(response.content);\r\n    }\r\n    catch (e) {\r\n        throw createDeserializationError(e.message, response);\r\n    }\r\n}\r\nfunction deserializeFailure({ content, status }, stackFrame) {\r\n    // eslint-disable-next-line functional/no-let\r\n    let message = content;\r\n    // eslint-disable-next-line functional/no-try-statement\r\n    try {\r\n        message = JSON.parse(content).message;\r\n    }\r\n    catch (e) {\r\n        // ..\r\n    }\r\n    return createApiError(message, status, stackFrame);\r\n}\n\n// eslint-disable-next-line functional/prefer-readonly-type\r\nfunction encode(format, ...args) {\r\n    // eslint-disable-next-line functional/no-let\r\n    let i = 0;\r\n    return format.replace(/%s/g, () => encodeURIComponent(args[i++]));\r\n}\n\nfunction serializeUrl(host, path, queryParameters) {\r\n    const queryParametersAsString = serializeQueryParameters(queryParameters);\r\n    // eslint-disable-next-line functional/no-let\r\n    let url = `${host.protocol}://${host.url}/${path.charAt(0) === '/' ? path.substr(1) : path}`;\r\n    if (queryParametersAsString.length) {\r\n        url += `?${queryParametersAsString}`;\r\n    }\r\n    return url;\r\n}\r\nfunction serializeQueryParameters(parameters) {\r\n    const isObjectOrArray = (value) => Object.prototype.toString.call(value) === '[object Object]' ||\r\n        Object.prototype.toString.call(value) === '[object Array]';\r\n    return Object.keys(parameters)\r\n        .map(key => encode('%s=%s', key, isObjectOrArray(parameters[key]) ? JSON.stringify(parameters[key]) : parameters[key]))\r\n        .join('&');\r\n}\r\nfunction serializeData(request, requestOptions) {\r\n    if (request.method === _algolia_requester_common__WEBPACK_IMPORTED_MODULE_0__.MethodEnum.Get ||\r\n        (request.data === undefined && requestOptions.data === undefined)) {\r\n        return undefined;\r\n    }\r\n    const data = Array.isArray(request.data)\r\n        ? request.data\r\n        : { ...request.data, ...requestOptions.data };\r\n    return JSON.stringify(data);\r\n}\r\nfunction serializeHeaders(transporter, requestOptions) {\r\n    const headers = {\r\n        ...transporter.headers,\r\n        ...requestOptions.headers,\r\n    };\r\n    const serializedHeaders = {};\r\n    Object.keys(headers).forEach(header => {\r\n        const value = headers[header];\r\n        // @ts-ignore\r\n        // eslint-disable-next-line functional/immutable-data\r\n        serializedHeaders[header.toLowerCase()] = value;\r\n    });\r\n    return serializedHeaders;\r\n}\n\nfunction stackTraceWithoutCredentials(stackTrace) {\r\n    return stackTrace.map(stackFrame => stackFrameWithoutCredentials(stackFrame));\r\n}\r\nfunction stackFrameWithoutCredentials(stackFrame) {\r\n    const modifiedHeaders = stackFrame.request.headers['x-algolia-api-key']\r\n        ? { 'x-algolia-api-key': '*****' }\r\n        : {};\r\n    return {\r\n        ...stackFrame,\r\n        request: {\r\n            ...stackFrame.request,\r\n            headers: {\r\n                ...stackFrame.request.headers,\r\n                ...modifiedHeaders,\r\n            },\r\n        },\r\n    };\r\n}\n\nfunction createApiError(message, status, transporterStackTrace) {\r\n    return {\r\n        name: 'ApiError',\r\n        message,\r\n        status,\r\n        transporterStackTrace,\r\n    };\r\n}\n\nfunction createDeserializationError(message, response) {\r\n    return {\r\n        name: 'DeserializationError',\r\n        message,\r\n        response,\r\n    };\r\n}\n\nfunction createRetryError(transporterStackTrace) {\r\n    return {\r\n        name: 'RetryError',\r\n        message: 'Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support .',\r\n        transporterStackTrace,\r\n    };\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/transporter/dist/transporter.esm.js\n");

/***/ })

};
;